
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-12-07","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/09212024_orin_nano_camera_devicetree_and_overlay/","summary":"Jetson Orin Nano Device Tree and Overlay for CSI Cameras Recently I\u0026rsquo;m turning to play with Jetson Orin Nano, trying to bring up Sony imx296 camera via one of its CSI port. Getting camera to work is quite involved, embedded Linux systems don\u0026rsquo;t have such support of easy installing drivers for cameras. This blog records what I learned in the process.\nSKU and Jetpack Versions These matters a lot when you try to bring up something on your Jetson system.","tags":[],"text":"jetson orin nano device tree and overlay for csi cameras recently i\u0026rsquo;m turning to play with jetson orin nano, trying to bring up sony imx296 camera via one of its csi port. getting camera to work is quite involved, embedded linux systems don\u0026rsquo;t have such support of easy installing drivers for cameras. this blog records what i learned in the process.\nsku and jetpack versions these matters a lot when you try to bring up something on your jetson system.\njetpack is provided by nvidia, mainly for the bsp (board specific package?) sw, embedded linux for tegra (l4t) and developing tools etc.\nhardware wise, besides the core board provided by nvidia, different carrier board vendors have different design, thus they need to \u0026ldquo;patch\u0026rdquo; the bsp appropriately.\nin this blog, we\u0026rsquo;ll focus on the stock jetson orin nano development kit (8gb) - jetson orin nano carrier board (p3768-0000), and jetson orin nano 8gb module (p3767-0003) (guess these are the skus).\nthe jetpack versions can be figured out: latest jetpack, or archived ones.\nthe sku for boards matter too. in l4t r36.3 release notes, the orin series skus are listed:\njetson-agx-orin-devkit-industrial.conf: flashes the jetson orin industrial module (p3701-0008), which is attached to a jetson orin reference carrier board (p3737-0000). jetson-orin-nano-devkit.conf: flashes one of the following modules that is attached to a jetson orin nano carrier board (p3768-0000): ● jetson orin nano developer kit module with sd card (p3767-0005) ● jetson orin nano 8gb module (p3767-0003) ● jetson orin nano 4gb module (p3767-0004) ● jetson orin nx 16gb module (p3767-0000) ● jetson orin nx 8gb module (p3767-0001) jetson-agx-orin-devkit.conf: flashes one of the following modules that is attached to a jetson agx orin developer kit (p3730-0000) reference carrier board (p3737-0000): ● jetson agx orin developer kit module (p3701-0000) ● jetson agx orin 32gb module (p3701-0004) ● jetson agx orin 64gb module (p3701-0005) orin nano default devicetree for cameras assume the l4t and jetpack sw locates at /work/l4t/r36.3/linux_for_tegra.\nin file jetson-orin-nano-devkit.conf, you will notice this line: overlay_dtb_file+=\u0026#34;,tegra234-p3768-0000+p3767-0000-dynamic.dtbo\u0026#34;; this is, i guess, the overlay file that specifies the default camera setup for orin nano devkit.\ntracing into ./source/hardware/nvidia/t23x/nv-public/overlay/tegra234-p3768-0000+p3767-0000-dynamic.dts: #include \u0026#34;tegra234-p3768-camera-rbpcv2-imx219.dtsi\u0026#34; tracing into ./source/hardware/nvidia/t23x/nv-public/overlay/tegra234-p3768-camera-rbpcv2-imx219.dtsi. here you find the default imx219 camera is used as default. this article from nvidia developer\u0026rsquo;s forum provides good hint. #define cam0_rst tegra234_main_gpio(h, 3) #define cam0_pwdn\ttegra234_main_gpio(h, 6) #define cam1_pwdn\ttegra234_main_gpio(ac, 0) #define cam_i2c_mux tegra234_aon_gpio(cc, 3) #include \u0026lt;dt-bindings/tegra234-p3767-0000-common.h\u0026gt; #include \u0026#34;tegra234-camera-rbpcv2-imx219.dtsi\u0026#34; / { fragment-camera-imx219@0 { target-path = \u0026#34;/\u0026#34;; __overlay__ { bus@0 { cam_i2cmux{ status = \u0026#34;okay\u0026#34;; compatible = \u0026#34;i2c-mux-gpio\u0026#34;; #address-cells = \u0026lt;1\u0026gt;; #size-cells = \u0026lt;0\u0026gt;; i2c-parent = \u0026lt;\u0026amp;cam_i2c\u0026gt;; mux-gpios = \u0026lt;\u0026amp;gpio_aon cam_i2c_mux gpio_active_high\u0026gt;; i2c@0 { status = \u0026#34;okay\u0026#34;; reg = \u0026lt;0\u0026gt;; #address-cells = \u0026lt;1\u0026gt;; #size-cells = \u0026lt;0\u0026gt;; rbpcv2_imx219_a@10 { reset-gpios = \u0026lt;\u0026amp;gpio cam0_pwdn gpio_active_high\u0026gt;; }; }; i2c@1 { status = \u0026#34;okay\u0026#34;; reg = \u0026lt;1\u0026gt;; #address-cells = \u0026lt;1\u0026gt;; #size-cells = \u0026lt;0\u0026gt;; rbpcv2_imx219_c@10 { reset-gpios = \u0026lt;\u0026amp;gpio cam1_pwdn gpio_active_high\u0026gt;; }; }; }; gpio@2200000 { camera-control-output-low { gpio-hog; output-low; gpios = \u0026lt;cam0_rst 0\u0026gt;; label = \u0026#34;cam0-rst\u0026#34;; }; }; }; }; }; }; change bootup time overlay change /boot/extlinux/extlinux.config setting can change the boot options. please remember to keep a backup version so you can always revert back to a known working kernel/state.\naccording to this forum reply, combination of fdt and overlays works, single fdt works, but single overlays line won\u0026rsquo;t.\nnvidia@ubuntu:~$ cat /boot/extlinux/extlinux.conf timeout 30 default primary menu title l4t boot options label primary menu label primary kernel linux /boot/image fdt /boot/dtb/kernel_tegra234-p3768-0000+p3767-0005-nv.dtb initrd /boot/initrd append ${cbootargs} root=partuuid=3c59f6a7-eb36-494c-be52-0bfab7f91e4b rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttytcu0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0 nospectre_bhb video=efifb:off console=tty0 nv-auto-config overlays /boot/tegra234-p3767-camera-p3768-imx296-c.dtbo label backup menu label backup kernel linux /boot/image.backup initrd /boot/initrd append ${cbootargs} root=partuuid=3c59f6a7-eb36-494c-be52-0bfab7f91e4b rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttytcu0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0 nospectre_bhb video=efifb:off console=tty0 nv-auto-config load your camera driver confirm port binding connections according to nvidia official doc, this can be verified as below (camera -\u0026gt; csi -\u0026gt; vi):\nnvidia@ubuntu:~$ sudo media-ctl -p -d /dev/media0 [sudo] password for nvidia: media controller api version 5.15.136 media device information ------------------------ driver tegra-camrtc-ca model nvidia tegra video input device serial bus info hw revision 0x3 driver version 5.15.136 device topology - entity 1: 13e00000.host1x:nvcsi@15a00000- (2 pads, 2 links) type v4l2 subdev subtype unknown flags 0 device node name /dev/v4l-subdev0 pad0: sink \u0026lt;- \u0026#34;imx296 9-001a\u0026#34;:0 [enabled] pad1: source -\u0026gt; \u0026#34;vi-output, imx296 9-001a\u0026#34;:0 [enabled] - entity 4: imx296 9-001a (1 pad, 1 link) type v4l2 subdev subtype sensor flags 0 device node name /dev/v4l-subdev1 pad0: source [fmt:srggb10_1x10/1456x1088 field:none colorspace:srgb] -\u0026gt; \u0026#34;13e00000.host1x:nvcsi@15a00000-\u0026#34;:0 [enabled] - entity 6: vi-output, imx296 9-001a (1 pad, 1 link) type node subtype v4l flags 0 device node name /dev/video0 pad0: sink \u0026lt;- \u0026#34;13e00000.host1x:nvcsi@15a00000-\u0026#34;:1 [enabled] ","title":"Orin Nano Camera DeviceTree and Overlay"},{"date":"2024-06-29","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06282024_yocto_l4t_r32.3.1_on_tx2_j120/","summary":"Finally we are here, with TX2 sitting on the J120 carrier board, we are ready to flash the setup with customized patched Yocto.\nYocto on TX2-J120 with Jetpack4.3 Meta-tegra, Poky, meta-tx2-jp43 Very similar to previous blog article Yocto on TX2 with Jetpack4.3, we set up meta-tegra, poky, except that we need to setup layer meta-tx2-jp43 to a special branch for J120.\ncd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43-j120 \u0026amp;\u0026amp; cd yocto-tx2-jp43-j120 git clone https://github.","tags":[],"text":"finally we are here, with tx2 sitting on the j120 carrier board, we are ready to flash the setup with customized patched yocto.\nyocto on tx2-j120 with jetpack4.3 meta-tegra, poky, meta-tx2-jp43 very similar to previous blog article yocto on tx2 with jetpack4.3, we set up meta-tegra, poky, except that we need to setup layer meta-tx2-jp43 to a special branch for j120.\ncd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43-j120 \u0026amp;\u0026amp; cd yocto-tx2-jp43-j120 git clone https://github.com/oe4t/meta-tegra.git cd meta-tegra git branch -a git checkout dunfell-l4t-r32.3.1 cd ~/yocto-tx2-jp43-j120 git clone https://github.com/yoctoproject/poky.git cd poky git branch -a git checkout dunfell cd ~/yocto-tx2-jp43-j120 git clone https://github.com/jinchenglee/meta-tx2-jp43.git cd meta-tx2-jp43 git branch -a git checkout dev/tx2-j120-jp43 # special branch for tx2 on j120 cd ~/yocto-tx2-jp43-j120 source poky/oe-init-build-env local.conf and bblayers.conf changes in local.conf machine ??= \u0026#34;jetson-tx2\u0026#34; machine_essential_extra_rrecommends += \u0026#34;kernel-modules\u0026#34; dl_dir ?= \u0026#34;/home/${user}/yocto/downloads\u0026#34; sstate_dir ?= \u0026#34;/home/${user}/yocto/sstate_dir\u0026#34; package_classes ?= \u0026#34;package_deb\u0026#34; # for apt (?) extra_image_features ?= \u0026#34;debug-tweaks tools-sdk package-management\u0026#34; image_classes += \u0026#34;image_types_tegra\u0026#34; preferred_version_python3 = \u0026#34;3.8%\u0026#34; preferred_version_python3-native = \u0026#34;3.8%\u0026#34; bb_number_threads = \u0026#39;11\u0026#39; parallel_make = \u0026#39;-j11\u0026#39; image_install_append = \u0026#34; glfw cmake vim tmux\u0026#34; changes in bblayers.conf bblayers ?= \u0026#34; \\ /home/${user}/yocto-tx2-jp43/meta-tegra \\ /home/${user}/yocto-tx2-jp43/poky/meta \\ /home/${user}/yocto-tx2-jp43/poky/meta-poky \\ /home/${user}/yocto-tx2-jp43/poky/meta-yocto-bsp \\ /home/${user}/yocto-tx2-jp43/meta-tx2-jp43 \\ /home/${user}/yocto-tx2-jp43/meta-openembedded/meta-oe \\ # cmake or gflw seems require this. \u0026#34; build image \u0026gt; bitbake core-image-sato-sdk # or core-image-sata-dev, core-image-minimal etc. deploy script:\n#!/bin/bash image=$1 machine=$2 scriptdir=\u0026#34;$( cd \u0026#34;$( dirname \u0026#34;${bash_source[0]}\u0026#34; )\u0026#34; \u0026gt;/dev/null \u0026amp;\u0026amp; pwd )\u0026#34; deployfile=${image}-${machine}.tegraflash.zip tmpdir=`mktemp` rm -rf $tmpdir mkdir -p $tmpdir echo \u0026#34;using temp directory $tmpdir\u0026#34; pushd $tmpdir cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile . unzip $deployfile set -e sudo ./doflash.sh popd echo \u0026#34;removing temp directory $tmpdir\u0026#34; rm -rf $tmpdir sudo ./deploy.sh core-image-sato-sdk jetson-tx2 this image should have both real-time patch and realsense r200 supports.\nroot@jetson-tx2:~# uname -a linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 smp preempt rt thu jan 28 22:42:33 utc 2021 aarch64 aarch64 aarch64 gnu/linux build rtimulib2 my j120 carrier board has a on-board 9-axis (gyro, accelerometer, compass) mpu-9250. here we show how the demo app can be compiled and run on the yocto-linux just flashed.\nget rtimulib2 there\u0026rsquo;s no git installed on the flashed tx2-j120. let\u0026rsquo;s get the zipped version from github:rtimulib2, then rcp it over to device.\nrcp rtimulib2-master.zip root@\u0026lt;device ip addr\u0026gt;:/home/root/ compile rtimulib root@jetson-tx2:~/rtimulib2-master# cd rtimulib/ root@jetson-tx2:~/rtimulib2-master/rtimulib# ls cmakelists.txt\trtfusionkalman4.cpp rtimuaccelcal.cpp\trtimuhal.h\trtimulibdefs.h rtimusettings.h imudrivers\trtfusionkalman4.h rtimuaccelcal.h\trtimulib license rtimumagcal.cpp rtmath.cpp rtfusion.cpp\trtfusionrtqf.cpp rtimucaldefs.h\trtimulib.h\trtimumagcal.h rtmath.h rtfusion.h\trtfusionrtqf.h\trtimuhal.cpp\trtimulib.pri\trtimusettings.cpp build root@jetson-tx2:~/rtimulib2-master/rtimulib# mkdir build \u0026amp;\u0026amp; cd build root@jetson-tx2:~/rtimulib2-master/rtimulib/build# cmake .. root@jetson-tx2:~/rtimulib2-master/rtimulib/build# make -j compile application some of the applications need qt4 library that doesn\u0026rsquo;t exist on the yocto built we prepared, so we will first comment those off in /linux/cmakelists.txt:\noption(build_gl \u0026#34;build rtimulibgl\u0026#34; off) option(build_drive \u0026#34;build rtimulibdrive\u0026#34; on) option(build_drive10 \u0026#34;build rtimulibdrive10\u0026#34; on) option(build_drive11 \u0026#34;build rtimulibdrive11\u0026#34; on) option(build_cal \u0026#34;build rtimulibcal\u0026#34; off) option(build_demo \u0026#34;build rtimulibdemo\u0026#34; off) then compile:\nroot@jetson-tx2:~/rtimulib2-master/linux/build# pwd /home/root/rtimulib2-master/linux/build root@jetson-tx2:~/rtimulib2-master/linux/build# cmake .. root@jetson-tx2:~/rtimulib2-master/linux/build# make -j on our j120 board (or setting in device tree?), the mpu-9250 is on spi bus 1 device 0 (spidev1.0). a related forum disucssion confirmed this as well. so we have to modify rtimulib.ini configuration before running apps.\n# imu type - # ... # 7 = invensense mpu-9250 # 8 = stm l3gd20h + lsm303dlhc # ... imutype=7 # is bus i2c: \u0026#39;true\u0026#39; for i2c, \u0026#39;false\u0026#39; for spi busisi2c=false # spi bus (between 0 and 7) spibus=1 # spi select (between 0 and 1) spiselect=0 run the app (guess the mpu is not calibrated, so the data are not trust-worthy):\nroot@jetson-tx2:~/rtimulib2-master/linux/build/rtimulibdrive11# vi rtimulib.ini root@jetson-tx2:~/rtimulib2-master/linux/build/rtimulibdrive11# sudo ./rtimulibdrive11 settings file rtimulib.ini loaded using fusion algorithm rtqf detected ms5611 at standard address detected htu21d at standard address min/max compass calibration not in use ellipsoid compass calibration not in use accel calibration not in use mpu-9250 init complete sample rate 0: : roll:179.025433, pitch:-0.544863, yaw:43.259560 pressure: -334.6, height above sea level: nan, temperature: 0.0, humidity: 0.0 sample rate 0: : roll:178.940793, pitch:-0.527068, yaw:43.185848 pressure: -268.4, height above sea level: nan, temperature: -46.8, humidity: 0.0 sample rate 0: : roll:178.934127, pitch:-0.513112, yaw:43.088907 pressure: -268.4, height above sea level: nan, temperature: -46.8, humidity: -16.8 sample rate 0: : roll:178.963428, pitch:-0.509524, yaw:42.994914 pressure: -268.4, height above sea level: nan, temperature: -46.8, humidity: -16.8 sample rate 85: : roll:179.010133, pitch:-0.507106, yaw:42.906466 pressure: -268.4, height above sea level: nan, temperature: -46.8, humidity: -16.8 sample rate 85: : roll:179.057616, pitch:-0.509052, yaw:42.830696 pressure: -268.4, height above sea level: nan, temperature: -46.8, humidity: -16.8 ... ","title":"Yocto L4T R32.3.1 on TX2 J120"},{"date":"2024-06-29","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06272024_create_kernel_patch_for_j120_carrier_board/","summary":"Patch Linux Kernel using Official Firmware J120 is a third-party Jetson TX2 carrier board from Auvidea, thus whenever new Jetpack was released there need updated firmware from Auvidea. This section describes how to apply the J120 updated firmware v3.0 released on Feb 2020 (download link):\nFeb 2020 J90/J120/J130 (202 MB) 3.0 supports: Jetson TX2 only – JetPack 4.3 (L4T 32.3.1) – 2x USB 3.0 – IMU MPU9250 (spidev1.0) – 1x GbE – 1x M.","tags":[],"text":"patch linux kernel using official firmware j120 is a third-party jetson tx2 carrier board from auvidea, thus whenever new jetpack was released there need updated firmware from auvidea. this section describes how to apply the j120 updated firmware v3.0 released on feb 2020 (download link):\nfeb 2020 j90/j120/j130 (202 mb) 3.0 supports: jetson tx2 only – jetpack 4.3 (l4t 32.3.1) – 2x usb 3.0 – imu mpu9250 (spidev1.0) – 1x gbe – 1x m.2 nvme pcie x4 – port mapping: config 2 (default) unzip the downloaded file shows two tar\u0026rsquo;ed packages: kernel_out and kernel_src. the former is already-built binaries in the relase; the latter contains the corresponding modified linux kernel source files that the former binaries were generated.\nthe steps to apply the patches are listed in file how_to_flash_tx2_with_nvidia_sdkmanager.txt as below. it uses the released patched binaries only.\nhow to install the auvidea kernel the nvidia sdkmanager #################################################################################### this manual is written for the jetson tx2 1. prepare the sdk only needed if no tx2 was flashed before -start the sdkmanager -select the jetson tx2(p3310) as target hardware -select jetpack 4.3 as target operating system -start the installation until the sdk asks you for either use automatic or manual setup -\u0026gt; at this point you can choose to \u0026#34;skip\u0026#34; the rest of the installation and continue with step 2 of this instructions 2. copy the contents of the kernel_out folder in the auvidea packet to the nvida_sdk folder -\u0026gt; cp ~/kernel_out/* /home/user/nvidia/nvidia_sdk/jetpack_4.3_linux_p3310/ 3. switch in the tx2 folder and apply binaries -\u0026gt; cd /home/user/nvidia/nvidia_sdk/jetpack_4.3_linux_p3310/linux_for_tegra/ -\u0026gt; sudo ./apply_binaries.sh 4. start the sdkmanger and follow the normal installation process you can also use the flowing commands to flash the tx2 after step 3: cd /home/user/nvidia/nvidia_sdk/jetpack_4.3_linux_p3310/linux_for_tegra/ verify modified kernel source files download correct version ./source_sync.sh -k tegra-l4t-r32.3.1 create a special patch file let\u0026rsquo;s call original unchanged kernel source directory target_directory, the directory contains patched sources source_directory.\nthe condition is a bit complex:\nthere exist files in target_directory that don\u0026rsquo;t need to be modified and these files don\u0026rsquo;t exist in source directory; there might exist new files/directories in source directory that don\u0026rsquo;t exist in target directory a simple diff to generate patch file is not possible.\na script generate_patch.sh is created for the purpose:\n#!/bin/bash # check if both arguments are provided if [ \u0026#34;$#\u0026#34; -ne 2 ]; then echo \u0026#34;usage: $0 \u0026lt;source_directory\u0026gt; \u0026lt;target_directory\u0026gt;\u0026#34; exit 1 fi source_dir=\u0026#34;$1\u0026#34; target_dir=\u0026#34;$2\u0026#34; # function to generate diff for a file generate_file_diff() { local file=\u0026#34;$1\u0026#34; local rel_path=\u0026#34;${file#$source_dir/}\u0026#34; if [ -f \u0026#34;$target_dir/$rel_path\u0026#34; ]; then diff -un \u0026#34;$target_dir/$rel_path\u0026#34; \u0026#34;$file\u0026#34; else diff -un /dev/null \u0026#34;$file\u0026#34; fi } # function to process a directory process_directory() { local dir=\u0026#34;$1\u0026#34; local rel_dir=\u0026#34;${dir#$source_dir/}\u0026#34; # create directory entry if it doesn\u0026#39;t exist in target if [ ! -d \u0026#34;$target_dir/$rel_dir\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$rel_dir\u0026#34; != \u0026#34;\u0026#34; ]; then echo \u0026#34;diff -un $target_dir/$rel_dir $source_dir/$rel_dir\u0026#34; echo \u0026#34;--- $target_dir/$rel_dir\u0026#34; echo \u0026#34;+++ $source_dir/$rel_dir\u0026#34; echo \u0026#34;@@ -0,0 +1 @@\u0026#34; echo \u0026#34;+$rel_dir/\u0026#34; fi # process files in this directory find \u0026#34;$dir\u0026#34; -maxdepth 1 -type f | while read -r file; do generate_file_diff \u0026#34;$file\u0026#34; done # recursively process subdirectories find \u0026#34;$dir\u0026#34; -mindepth 1 -maxdepth 1 -type d | while read -r subdir; do process_directory \u0026#34;$subdir\u0026#34; done } # start processing from the root of the source directory process_directory \u0026#34;$source_dir\u0026#34; \u0026gt; update.patch run this script to generate update.patch file:\nxxx@ubuntu18:~/tx2-j120/j90-j120-j130_4_3/kernel_src$ pwd /home/xxx/tx2-j120/j90-j120-j130_4_3/kernel_src \u0026lt;= this dir is from auvidea firmware v3.0 xxx@ubuntu18:~/tx2-j120/j90-j120-j130_4_3/kernel_src$ bash ../generate_patch.sh . ~/tx2_source_build/r32-3-1_release_v1.0/sources apply the patch file we need another special script apply_patch.sh because we need first create those non-exist new directories in target directory first:\n#!/bin/bash patch_file=\u0026#34;update.patch\u0026#34; # check if both arguments are provided if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;usage: $0 \u0026lt;target_directory\u0026gt;\u0026#34; exit 1 fi target_dir=\u0026#34;$1\u0026#34; # extract directory creations grep -e \u0026#34;^\\+[^+]\\s+\\w\\/$\u0026#34; \u0026#34;$patch_file\u0026#34; | sed \u0026#39;s/^+//\u0026#39; | grep \u0026#34;/$\u0026#34; \u0026gt; directories.txt # create directories while read -r dir; do mkdir -p \u0026#34;$target_dir/$dir\u0026#34; done \u0026lt; directories.txt # remove directory creation diffs from the patch file sed -i \u0026#39;/^diff.*\\/$/d; /^---.*\\/$/d; /^+++.*\\/$/d; /^@@ -0,0 +1 @@$/d; /^\\+[^+]\\s+\\w\\/$/d\u0026#39; \u0026#34;$patch_file\u0026#34; # apply the modified patch patch -p1 -n -d \u0026#34;$target_dir\u0026#34; \u0026lt; \u0026#34;$patch_file\u0026#34; then apply the patch:\nbash ../apply_patch.sh ~/tx2_source_build/r32-3-1_release_v1.0/sources compile the kernel and verify skip here the manual process.\ncreate patch from modified kernel source files after we\u0026rsquo;ve verified the source file changes, we can leverage yocto devtool to generate the patch file. how to get the linux kernel sources and use devtool can be found in previous blogs. skipping here. the key part is to get the source files patched using the two special scripts (generate_patch.sh and apply_patch.sh in last section of this blog article.\nthe patch is recorded in this commit into branch dev/tx2-j120-jp43 of meta-tx2-jp43. the key patch is 0003-linux-kernel-patch-for-tx2-on-j120-carrier-board-wit.patch.\n","title":"Create Kernel Patch for TX2 J120 Carrier Board"},{"date":"2024-06-13","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06132024_yocto_patch_l4t.r32.3.1_tx2/","summary":"Patch to fix *-sdk build failures When a unmodified yocto build environment is setup (see previous blog about Yocto on TX2, \u0026ldquo;default meta-tegra build\u0026rdquo;), trying to build *-sdk (e.g. core-image-sato-sdk) will fail although *-dev builds are fine.\ncompilation: srcline.c The failure is related to perf-1.0 tool that Linux kernel requires. This first error comes from kernel compilation of tools/perf/util/srcline.c.\n/build/tmp/work/intel_core2_32-poky-linux/perf/1.0-r9/perf-1.0/perf-in.o: in function `find_address_in_section\u0026#39;: /usr/src/debug/perf/1.0-r9/perf-1.0/tools/perf/util/srcline.c:200: undefined reference to `bfd_get_section_flags\u0026#39; A search online result shows hint how to fix the source code.","tags":[],"text":"patch to fix *-sdk build failures when a unmodified yocto build environment is setup (see previous blog about yocto on tx2, \u0026ldquo;default meta-tegra build\u0026rdquo;), trying to build *-sdk (e.g. core-image-sato-sdk) will fail although *-dev builds are fine.\ncompilation: srcline.c the failure is related to perf-1.0 tool that linux kernel requires. this first error comes from kernel compilation of tools/perf/util/srcline.c.\n/build/tmp/work/intel_core2_32-poky-linux/perf/1.0-r9/perf-1.0/perf-in.o: in function `find_address_in_section\u0026#39;: /usr/src/debug/perf/1.0-r9/perf-1.0/tools/perf/util/srcline.c:200: undefined reference to `bfd_get_section_flags\u0026#39; a search online result shows hint how to fix the source code.\ninstallation: setup.py then the failure comes from (it seems) preferred_version_python3 = \u0026quot;3.8%\u0026quot; vs. tools/perf/util/setup.py of perf-1.0 expects python2.x. after searching around, i ended up using 2to3 - automated python 2 to 3 code translation to have converted the setup.py which resulted the error.\ninstallation: python.c the installation phase of perf-1.0 hit yet another failure, which seems trying to expose the built perf library to python, but again, it expects python 2.x. the error is related to python c-api changes on pyobject_head macro used in tools/perf/util/python.c. several lines need to be changes similarly as below:\n@@ -513,7 +513,9 @@ static int pyrf_cpu_map__init(struct pyrf_cpu_map *pcpus, static void pyrf_cpu_map__delete(struct pyrf_cpu_map *pcpus) { cpu_map__put(pcpus-\u0026gt;cpus); - pcpus-\u0026gt;ob_type-\u0026gt;tp_free((pyobject*)pcpus); + // python2 vs. 3 incompatibility + //pcpus-\u0026gt;ob_type-\u0026gt;tp_free((pyobject*)pcpus); + py_type(pcpus)-\u0026gt;tp_free((pyobject*)pcpus); } using devtool to patch the kernel yocto provided easty-to-follow procedure to patch the kernel by using the devtool tool. it will fetch/sync the specifric kernel version to a local workspace. after local modification/try build/verification, it will package the changes as a recipe automatically. really convenient.\nnotice: unlike what mentioned in the yocto document linux-yocto, for our target tx2, we should replace that with linux-tegra.\nthe auto-prepared recipe looks like this:\n./meta-example/ ├── conf │ └── layer.conf ├── copying.mit ├── readme └── recipes-kernel └── linux ├── linux-tegra │ └── 0001-workaround-build-installation-issues-related-to-perf.patch └── linux-tegra_4.9.bbappend rebuild and flash rebuild the image shows suceess.\n@ubuntu18:~/yocto-tegra/build$ bitbake core-image-sato-sdk parsing recipes: 100% |#################################################################################################| time: 0:00:12 parsing of 875 .bb files complete (0 cached, 875 parsed). 1486 targets, 76 skipped, 0 masked, 0 errors. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;ubuntu-18.04\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; meta-example = \u0026#34;\u0026lt;unknown\u0026gt;:\u0026lt;unknown\u0026gt;\u0026#34; initialising tasks: 100% |##############################################################################################| time: 0:00:04 sstate summary: wanted 3202 found 3158 missed 44 current 0 (98% match, 0% complete) note: executing tasks note: tasks summary: attempted 7674 tasks of which 7013 didn\u0026#39;t need to be rerun and all succeeded. flash with command sudo ./deploy.sh core-image-sato-sdk jetson-tx2.\npost-flash: apt-get sources.list and cyclictest some post-flash actions on the tx2 device to prepare some comparison vs. a later preempt-rt patched kernel. will need rt-tests tool cyclictest on the device.\nset up apt-get sources.list our built image comes with apt-get because we\u0026rsquo;ve set added these to build/conf/local.conf (maybe only the package_deb is necessary for that):\nmachine = \u0026#34;jetson-tx2\u0026#34; machine_essential_extra_rrecommends += \u0026#34;kernel-modules\u0026#34; dl_dir ?= \u0026#34;/home/${user}/yocto/downloads\u0026#34; sstate_dir ?= \u0026#34;/home/${user}/yocto/sstate_dir\u0026#34; package_classes ?= \u0026#34;package_deb\u0026#34; extra_image_features ?= \u0026#34;debug-tweaks tools-sdk package-management\u0026#34; image_classes += \u0026#34;image_types_tegra\u0026#34; preferred_version_python3 = \u0026#34;3.8%\u0026#34; preferred_version_python3-native = \u0026#34;3.8%\u0026#34; bb_number_threads = \u0026#39;11\u0026#39; parallel_make = \u0026#39;-j11\u0026#39; after tx2 bootstrapped, set this to /etc/apt/sources.list:\ndeb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic main restricted universe multiverse deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main restricted universe multiverse deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-backports main restricted universe multiverse deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-security main restricted universe multiverse install rt-tests then do apt-get update, then install rt-tests:\napt-get install rt-tests it complains about below, which might be resolved by dpkg -i --force-overwrite \u0026lt;filename\u0026gt;.deb to force overwrite, but i don\u0026rsquo;t bother to do that, since , but it seems cyclictest has been installed successfully.\npreparing to unpack .../xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb ... unpacking xz-utils (5.2.2-1.3ubuntu0.1) ... dpkg: error processing archive /var/cache/apt/archives/xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb (--unpack): trying to overwrite \u0026#39;/usr/bin/lzmainfo\u0026#39;, which is also in package xz 5.2.4-r0 dpkg-deb: error: paste subprocess was killed by signal (broken pipe) selecting previously unselected package rt-tests. preparing to unpack .../rt-tests_1.0-3_arm64.deb ... unpacking rt-tests (1.0-3) ... errors were encountered while processing: /var/cache/apt/archives/xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb e: sub-process /usr/bin/dpkg returned an error code (1) run cyclictest root@jetson-tx2:~# uname -a linux jetson-tx2 4.9.140-l4t-r32.3.1+ga0004d2ad6a4 #1 smp preempt ... aarch64 aarch64 aarch64 gnu/linux root@jetson-tx2:~# cyclictest -t 5 -p 80 -n # /dev/cpu_dma_latency set to 0us policy: fifo: loadavg: 0.06 0.08 0.08 1/222 3921 t: 0 ( 3913) p:80 i:1000 c: 297462 min: 7 act: 29 avg: 31 max: 334 t: 1 ( 3914) p:80 i:1500 c: 198308 min: 6 act: 28 avg: 29 max: 230 t: 2 ( 3915) p:80 i:2000 c: 148731 min: 8 act: 23 avg: 31 max: 288 t: 3 ( 3916) p:80 i:2500 c: 118985 min: 6 act: 43 avg: 29 max: 234 t: 4 ( 3917) p:80 i:3000 c: 99154 min: 6 act: 23 avg: 30 max: 201 patch preempt-rt these links are referred to as doing the patch:\nmeta-tegra: [applying preempt rt patches dunfell l4t r32.4.3](applying preempt rt patches dunfell l4t r32.4.3) nvidia forum: preempt-rt patches for jetson nano recorded steps:\npwd: ~/yocto-tx2-jp43-rt/build bitbake-layers create-layer ../meta-tx2-jp43 bitbake-layers add-layer ../meta-tx2-jp43 devtool modify linux-tegra pwd: ~/yocto-tx2-jp43-rt/build/workspace/sources/linux-tegra/scripts ./rt-patch.sh apply-patches pwd: ~/yocto-tx2-jp43-rt/build devtool menuconfig linux-tegra configure these:\ngeneral setup -\u0026gt; timer subsystem -\u0026gt; timer tick handling -\u0026gt; full dynticks system (tickless) kernel features -\u0026gt; preemption model: fully preemptible kernel (rt) optional: kernel features -\u0026gt; timer frequency: 1000 hz (default is 250hz) the changes in menuconfig is logged in file ~/yocto-tx2-jp43-rt/build/workspace/sources/linux-tegra/oe-local-files/devtool-fragment.cfg:\n# config_no_hz_idle is not set config_no_hz_full=y # config_no_hz_full_all is not set # config_no_hz_full_sysidle is not set config_virt_cpu_accounting=y # config_tick_cpu_accounting is not set config_virt_cpu_accounting_gen=y config_preempt_rcu=y config_context_tracking=y # config_context_tracking_force is not set config_rcu_nocb_cpu=y config_rcu_nocb_cpu_none=y # config_rcu_nocb_cpu_zero is not set # config_rcu_nocb_cpu_all is not set config_preempt=y config_preempt_rt_base=y config_preempt_lazy=y # config_preempt_none is not set config_preempt_rt_full=y config_preempt_count=y # config_transparent_hugepage_always is not set config_debug_preempt=y # config_preempt_tracer is not set continue building kernel and image:\ndevtool build linux-tegra devtool build-image core-image-sato-dev combine both patches @ubuntu18:~/yocto-tx2-jp43-rt$ tree ./meta-tx2-jp43/ ./meta-tx2-jp43/ ├── conf │ └── layer.conf ├── copying.mit ├── readme └── recipes-kernel └── linux ├── linux-tegra │ ├── 0001-apply-preempt-rt-patch-to-patches-l4t-r32.3.1-on-lin.patch │ ├── 0002-workaround-build-installation-issues-related-to-perf.patch │ └── devtool-fragment.cfg └── linux-tegra_%.bbappend @ubuntu18:~/yocto-tx2-jp43-rt$ cat meta-tx2-jp43/recipes-kernel/linux/linux-tegra_%.bbappend filesextrapaths_prepend := \u0026#34;${thisdir}/${pn}:\u0026#34; src_uri += \u0026#34;file://devtool-fragment.cfg file://0001-apply-preempt-rt-patch-to-patches-l4t-r32.3.1-on-lin.patch\u0026#34; src_uri += \u0026#34;file://0002-workaround-build-installation-issues-related-to-perf.patch\u0026#34; @ubuntu18:~/yocto-tx2-jp43-rt/build$ bitbake core-image-sato-sdk run cyclictest (can compare with the run w/o rt patch):\nroot@jetson-tx2:~# uname -a linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 smp preempt rt ... aarch64 aarch64 aarch64 gnu/linux root@jetson-tx2:~# cyclictest -t 5 -p 80 -n # /dev/cpu_dma_latency set to 0us policy: fifo: loadavg: 0.17 0.25 0.18 2/306 3979 t: 0 ( 3971) p:80 i:1000 c: 279669 min: 7 act: 31 avg: 29 max: 127 t: 1 ( 3972) p:80 i:1500 c: 186446 min: 7 act: 29 avg: 30 max: 139 t: 2 ( 3973) p:80 i:2000 c: 139834 min: 8 act: 24 avg: 31 max: 146 t: 3 ( 3974) p:80 i:2500 c: 111867 min: 8 act: 29 avg: 31 max: 117 t: 4 ( 3975) p:80 i:3000 c: 93223 min: 7 act: 28 avg: 30 max: 110 ","title":"Yocto kernel patch L4T R32.3.1 on tx2"},{"date":"2024-06-10","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/","summary":"#Yocto on TX2 with Jetpack4.3\nThis blog tries to build TX2 image with industry-default flow for embedded system \u0026ndash; the Yocto project, for ancient Jetson TX2 with Jetpack 4.3 (L4T R32.3.1).\nDefault meta-tegra build Sync down meta-tegra with right branch dunfell-l4t-r32.3.1. Also, please check L4T R32.3.1 Notes. cd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43 \u0026amp;\u0026amp; cd yocto-tx2-jp43 git clone https://github.com/OE4T/meta-tegra.git cd meta-tegra git branch -a git checkout dunfell-l4t-r32.3.1 Sync down poky with right branch dunfell.","tags":[],"text":"#yocto on tx2 with jetpack4.3\nthis blog tries to build tx2 image with industry-default flow for embedded system \u0026ndash; the yocto project, for ancient jetson tx2 with jetpack 4.3 (l4t r32.3.1).\ndefault meta-tegra build sync down meta-tegra with right branch dunfell-l4t-r32.3.1. also, please check l4t r32.3.1 notes. cd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43 \u0026amp;\u0026amp; cd yocto-tx2-jp43 git clone https://github.com/oe4t/meta-tegra.git cd meta-tegra git branch -a git checkout dunfell-l4t-r32.3.1 sync down poky with right branch dunfell. cd ~/yocto-tx2-jp32 git clone https://github.com/yoctoproject/poky.git cd poky git branch -a git checkout dunfell active environment source poky/oe-init-build-env add configurations to build/conf/local.conf machine ??= \u0026#34;jetson-tx2\u0026#34; dl_dir ?= \u0026#34;/home/${user}/yocto/downloads\u0026#34; sstate_dir ?= \u0026#34;/home/${user}/yocto/sstate_dir\u0026#34; image_classes += \u0026#34;image_types_tegra\u0026#34; preferred_version_python3 = \u0026#34;3.8%\u0026#34; preferred_version_python3-native = \u0026#34;3.8%\u0026#34; bb_number_threads = \u0026#39;11\u0026#39; parallel_make = \u0026#39;-j11\u0026#39; add configuration to build/conf/bblayers.conf /home/${user}/yocto-tegra/meta-tegra \\ the bblayers.conf looks like:\n#// poky_bblayers_conf_version is increased each time build/conf/bblayers.conf #// changes incompatibly poky_bblayers_conf_version = \u0026#34;2\u0026#34; bbpath = \u0026#34;${topdir}\u0026#34; bbfiles ?= \u0026#34;\u0026#34; bblayers ?= \u0026#34; \\ /home/${user}/yocto-tegra/meta-tegra \\ /home/${user}/yocto-tx2-jp43/poky/meta \\ /home/${user}/yocto-tx2-jp43/poky/meta-poky \\ /home/${user}/yocto-tx2-jp43/poky/meta-yocto-bsp \\ \u0026#34; build core-image-minimal. bitbake core-image-minimal successful completion of the built shows sth. like below. i\u0026rsquo;m running on a previously built cache, so a lot of tasks don\u0026rsquo;t need re-run. if you are running from scratch, this process can take pretty long depending on your host machine (~hours).\n@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal loading cache: 100% |#####################################################################################################| time: 0:00:00 loaded 1486 entries from dependency cache. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;ubuntu-18.04\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; initialising tasks: 100% |################################################################################################| time: 0:00:01 sstate summary: wanted 1203 found 1199 missed 4 current 0 (99% match, 0% complete) note: executing tasks note: tasks summary: attempted 3200 tasks of which 2952 didn\u0026#39;t need to be rerun and all succeeded. deploy using this script:\n#!/bin/bash image=$1 machine=$2 scriptdir=\u0026#34;$( cd \u0026#34;$( dirname \u0026#34;${bash_source[0]}\u0026#34; )\u0026#34; \u0026gt;/dev/null \u0026amp;\u0026amp; pwd )\u0026#34; deployfile=${image}-${machine}.tegraflash.zip tmpdir=`mktemp` rm -rf $tmpdir mkdir -p $tmpdir echo \u0026#34;using temp directory $tmpdir\u0026#34; pushd $tmpdir cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile . unzip $deployfile set -e sudo ./doflash.sh popd echo \u0026#34;removing temp directory $tmpdir\u0026#34; rm -rf $tmpdir put jetson tx2 development kit into force recovery mode by:\npress down rec button and not release press down power button and release release rec button to make sure the board has entered recoverage mode, check lsusb on host:\nxxx@ubuntu18:~/yocto-tegra$ lsusb ... bus 003 device 013: id 0955:7c18 nvidia corp. \u0026lt;= check this line. ... run the deploy command:\n:~/yocto-tx2-jp43$ sudo ./deploy.sh core-image-minimal jetson-tx2 on the debug serial port or the connected monitor to tx2, you should see this:\npoky (yocto project reference distro) 3.1.33 jetson-tx2 /dev/ttyxxx jetson-tx2 login: using root without password should login you in.\nbuild core-image-sato-dev similarly, we can build an image with gui from yocto:\nbitbake core-image-sato-dev using the same deploy.sh script to flash:\nsudo ./deploy.sh core-image-sato-dev jetson-tx2 patch kernel with preempt-rt preempt-rt patches are for real-time applications on linux. the patching process described below refers to these links:\npreempt-rt patches for jetson nano applying preempt rt patches dunfell l4t r32.4.3 getting ready for kernel-dev using devtool according to yocto doc. update local.conf file:\nmachine_essential_extra_rrecommends += \u0026#34;kernel-modules\u0026#34; create a layer for patches and inform bitbake build env about the newly added layer: xxx@ubuntu18:~/yocto-tx2-jp43$ cd build/ xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers create-layer ../meta-tx2-jp43 note: starting bitbake server... add your new layer with \u0026#39;bitbake-layers add-layer ../meta-tx2-jp43\u0026#39; xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers add-layer ../meta-tx2-jp43/ note: starting bitbake server... the last commad will add the newly added layer to your build/conf/bblayers.conf\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ cat conf/bblayers.conf #// poky_bblayers_conf_version is increased each time build/conf/bblayers.conf #// changes incompatibly poky_bblayers_conf_version = \u0026#34;2\u0026#34; bbpath = \u0026#34;${topdir}\u0026#34; bbfiles ?= \u0026#34;\u0026#34; bblayers ?= \u0026#34; \\ /home/${user}/yocto-tegra/meta-tegra \\ /home/${user}/yocto-tx2-jp43/poky/meta \\ /home/${user}/yocto-tx2-jp43/poky/meta-poky \\ /home/${user}/yocto-tx2-jp43/poky/meta-yocto-bsp \\ /home/\u0026lt;your user name\u0026gt;/yocto-tx2-jp43/meta-tx2-jp43 \\ \u0026#34; bitbake core-image-minimal to make sure everything is ok. @ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal parsing recipes: 100% |###################################################################################################| time: 0:00:12 parsing of 876 .bb files complete (0 cached, 876 parsed). 1487 targets, 74 skipped, 0 masked, 0 errors. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;universal\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; meta-tx2-jp43 = \u0026#34;\u0026lt;unknown\u0026gt;:\u0026lt;unknown\u0026gt;\u0026#34; \u0026lt;= notice the blank \u0026#34;unknown\u0026#34; here! initialising tasks: 100% |################################################################################################| time: 0:00:01 sstate summary: wanted 367 found 359 missed 8 current 836 (97% match, 99% complete) note: executing tasks note: tasks summary: attempted 3200 tasks of which 3186 didn\u0026#39;t need to be rerun and all succeeded. using devtool to patch the kernel according to yocto doc.\ncheck out kernel source files. xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool modify linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... loading cache: 100% |#####################################################################################################| time: 0:00:00 loaded 1487 entries from dependency cache. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;universal\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; meta-tx2-jp43 workspace = \u0026#34;\u0026lt;unknown\u0026gt;:\u0026lt;unknown\u0026gt;\u0026#34; initialising tasks: 100% |################################################################################################| time: 0:00:00 sstate summary: wanted 55 found 54 missed 1 current 50 (98% match, 99% complete) note: executing tasks note: tasks summary: attempted 474 tasks of which 463 didn\u0026#39;t need to be rerun and all succeeded. info: adding local source files to srctree... info: copying kernel config to srctree info: source tree extracted to /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra info: recipe linux-tegra now set up to build from /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra patch the kernel source and build the kernel: xxx@ubuntu18:~/yocto-tx2-jp43/build/workspace/sources/linux-tegra$ ./scripts/rt-patch.sh apply-patches preempt rt patches successfully applied for auto! preempt rt patches successfully applied for l4t! using git status can see a bunch of files are modified and another bunch are added. however, when trying to build kernel exposes build errors:\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... ... note: executing tasks note: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra error: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: oe_runmake failed error: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: execution of \u0026#39;/home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/run.do_compile_kernelmodules.17505\u0026#39; failed with exit code 1 error: logfile of failure stored in: /home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/log.do_compile_kernelmodules.17505 (details:) ... /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c:1606:23: error: passing argument 1 of \u0026#39;waitqueue_active\u0026#39; from incompatible pointer type [-werror=incompatible-pointer-types] 1606 | if (waitqueue_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | | | struct swait_queue_head * ... $ vim ~/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c 1600 #if is_enabled(config_preempt_rt_full) 1601 if (swait_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) 1602 #else 1603 #if linux_version_code \u0026gt;= kernel_version(4, 14, 57) 1604 if (waitqueue_active((struct wait_queue_head *)\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) 1605 #else 1606 if (waitqueue_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) \u0026lt;= error here! 1607 #endif 1608 #endif modify kernel configuration google around shows the error could be avoided if config_preempt_rt_full is defined in .config before kernel compilation. (btw, there is another fix option here but i don\u0026rsquo;t try this way.)\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake -c menuconfig virtual/kernel select \u0026ldquo;kernel features -\u0026gt; preemption model (\u0026hellip;)\u0026rdquo; and select \u0026ldquo;fully preemptible kernel (rt)\u0026rdquo;.\nsave the modified kernel configuration $ bitbake -c savedefconfig virtual/kernel $ cp ./tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/linux-tegra-4.9.140+git999/defconfig ./workspace/sources/linux-tegra/arch/arm64/configs/defconfig now compile again, it should finish successfully.\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... ... warning: /home/xxx/yocto-tegra/meta-tegra/recipes-kernel/linux/linux-tegra_4.9.bb:do_compile is tainted from a forced run eta: 0:00:00 initialising tasks: 100% |################################################################################################| time: 0:00:02 sstate summary: wanted 324 found 322 missed 2 current 698 (99% match, 99% complete) note: executing tasks note: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra note: tasks summary: attempted 2648 tasks of which 2627 didn\u0026#39;t need to be rerun and all succeeded. summary: there was 1 warning message shown. create the image with modified kernel $ devtool build-image core-image-sato-dev flash the tx2 and you can see the patched kernel bootstrap successfully.\nroot@jetson-tx2:~# uname -a linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 smp preempt rt mon jun 10 18:20:28 utc 2024 aarch64 aarch64 aarch64 gnu/linux save the patch work for future use stage and commit local changes to the kernel $ cd workspace/sources/linux-tegra -- commit everything (new and modifed) --- commit 9d4a27452b73870aa07a13883818284c310331e3 (head -\u0026gt; patches-l4t-r32.3.1) author: openembedded \u0026lt;oe.patch@oe\u0026gt; date: mon jun 10 12:38:42 2024 -0700 my patch for jetson tx2 with jetpack 4.3/l4t r32.3.1 and preempt-rt. -- save a copy of defconfig and localversion_auto.cfg to dl_dir (defined in local.conf). $ cp defconfig ~/yocto/downloads/ $ cp localversion_auto.cfg ~/yocto/downloads/ -- export the changes in the commit as patches and create a .bbappend file in layer specificed (meta-tx2-jp43): $ devtool finish linux-tegra ../meta-tx2-jp43 $:~/yocto-tx2-jp43$ tree meta-tx2-jp43 meta-tx2-jp43 ├── conf │ └── layer.conf ├── copying.mit ├── readme ... └── recipes-kernel └── linux ├── linux-tegra-4.9 │ ├── 0001-my-patch-for-jetson-tx2-with-jetpack-4.3-l4t-r32.3.1.patch │ └── devtool-fragment.cfg └── linux-tegra_4.9.bb create a repository for the layer created the layer on github repo. yocto build with rt patch from scratch now we can use yocto and our customized layer to build rt-patched linux from scratch for jetson tx2 with jetpack 4.3 and l4t r32.3.1.\ngit clone https://github.com/oe4t/meta-tegra.git cd meta-tegra \u0026amp;\u0026amp; git checkout dunfell-l4t-r32.3.1 \u0026amp;\u0026amp; cd .. git clone https://github.com/yoctoproject/poky.git cd poky \u0026amp;\u0026amp; git checkout dunfell \u0026amp;\u0026amp; cd .. git clone https://github.com/jinchenglee/meta-tx2-jp43 source poky/oe-init-build-env #// make necessary changes to build/conf/local.conf and build/conf/bblayers.conf #// for example, add below to local.conf: #// #//extra_image_features ?= \u0026#34;debug-tweaks tools-sdk package-management\u0026#34; #//package_classes ?= \u0026#34;package_deb\u0026#34; bitbake core-image-sato-dev ","title":"Yocto on TX2 with Jetpack4.3"},{"date":"2024-06-04","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/","summary":"RealSense R200 on Jetson TX2 with Auvidea J120 carrier board Patch Jetpack 4.3 (L4T R32.3.1) with Auvidea J120 firmware v3.0 according to the README file in the tarball. \u0026ndash; As a side note, I cannot get latest v4.0 firmware to work with Jetpack 4.6, both USB ports on J120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware. \u0026ndash; Even with v3.0 firmware, there are some issues to live with: 1) only the top USB port is 3.","tags":[],"text":"realsense r200 on jetson tx2 with auvidea j120 carrier board patch jetpack 4.3 (l4t r32.3.1) with auvidea j120 firmware v3.0 according to the readme file in the tarball. \u0026ndash; as a side note, i cannot get latest v4.0 firmware to work with jetpack 4.6, both usb ports on j120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware. \u0026ndash; even with v3.0 firmware, there are some issues to live with: 1) only the top usb port is 3.0, the bottom usb port is only 2.0; 2) the fan seems not working (cannot be detected by jtop).\nflash the patched l4t to tx2 on j120 board\nclone librealsense2.\ngit clone https://github.com/intelrealsense/librealsense.git as of when this blog is being written, this commit is used:\ncommit ff8a9fb213ec1227394de4060743b0ed61171985 (head -\u0026gt; master, origin/master, origin/head) merge: 4673a37d9 488c6ec3e author: eran \u0026lt;librealsense.eran@gmail.com\u0026gt; date: sun apr 21 12:01:57 2024 +0300 pr #12864: merge v2.55.1 to master run permissions script from librealsense2 tot directory. # need to install v4l-utils first sudo apt install v4l-utils ./scripts/setup_udev_rules.sh build and apply patched kernel modules. ./scripts/patch-realsense-ubuntu-l4t.sh check the log file of this script: librealsense.patch.tx2.on.j120.log inside this blog github directory.\nfollow section run realsense r200 example apps of previous blog to r200 examples.\ninstall sdk\nsudo apt install nvidia-jetpack ","title":"06042024_r200_cam_on_TX2_J120"},{"date":"2024-06-04","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/","summary":"RealSense R200 Camera on Jetson TX2 with L4T R32.3.1 Both RealSense R200 camera and NVidia Jetson TX2 are considered legacy hardwares today (when this post is written at June, 2024) and are replaced by their newly released siblings that are more capable and fancier. However, I happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.\nJetpack and L4T versions For some practical reason (I only got Auvidea J120 TX2 carrier board patching firmware v3.","tags":[],"text":"realsense r200 camera on jetson tx2 with l4t r32.3.1 both realsense r200 camera and nvidia jetson tx2 are considered legacy hardwares today (when this post is written at june, 2024) and are replaced by their newly released siblings that are more capable and fancier. however, i happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.\njetpack and l4t versions for some practical reason (i only got auvidea j120 tx2 carrier board patching firmware v3.0, released on feb 2020, working with jp4.3; the latest j120 v4.0 firmware released on dec 2021 doesn\u0026rsquo;t work for me on jp4.6/l4t32.6.1), i chose jetpack 4.3 and l4t32.3.1 as the starting point on jetson tx2. this post talks about getting everything work on jetson tx2 development kit, not on j120 carrier board though. as a note for completeness, jetson tx2 latest sdk is jetpack 4.6.4, which couples with l4t 32.7.4. realsense r200 sdk/library the latest sdk/library that supports the legacy realsense r200 camera is v1.12.4, which seems a final release following the earlier said \u0026ldquo;final\u0026rdquo; release v1.12.1.\nthese blogs are good references:\nrunning the realsense r200 camera with librealsense and pyrealsense legacy libraries: link. intel librealsense installation doc, which was written for librealsense v2.0, however, this section works for v1.12.x which supports realsense r200. patch on jetson tx2 directly (not repeat all the details here, only for guidance, mileage varies if followed exactly below\u0026hellip;)\non a freshly flashed tx2, follow the guidance listed on intel librealsense installation:\nclone librealsense2. git clone https://github.com/intelrealsense/librealsense.git as of when this blog is being written, this commit is used:\ncommit ff8a9fb213ec1227394de4060743b0ed61171985 (head -\u0026gt; master, origin/master, origin/head) merge: 4673a37d9 488c6ec3e author: eran \u0026lt;librealsense.eran@gmail.com\u0026gt; date: sun apr 21 12:01:57 2024 +0300 pr #12864: merge v2.55.1 to master run permissions script from librealsense2 tot directory. ./scripts/setup_udev_rules.sh build and apply patched kernel modules. ./scripts/patch-realsense-ubuntu-l4t.sh build linux kernel from source on x86 host the patching process can be done on jetson tx2 itself (maybe simpler in that way as well) after flashing it with nvidia sdkmanager with the right version of l4t mentioned above. however, since i\u0026rsquo;m considering deploy yocto onto the same platform as a later step, it is better to start with x86 host patching.\ngood advices about building kernel from source on x86 host for jetson platform:\nauvidea j120 and intel realsense d435: link tx2i wifi support (the title is irrelevant but the message pointed to is good reference about general kernel compile from source): link general l4t kernel customization reference from official documentation of l4t.\nprerequesites since we are building for a legacy system, ubuntu 18.04 lts is needed on x86. $ lsb_release -a no lsb modules are available. distributor id:\tubuntu description:\tubuntu 18.04.6 lts release:\t18.04 codename:\tbionic a .config is preferred to be copied and saved from a freshly flashed tx2 to be used in later source compilation. how and why here.\ninstall cross-compile toolchain, following jetson linux driver package toolchain to install necessary tools.\nsync down the earlier mentioned librealsense git repository as mentioned in patch on jetson tx2.\ncompile get l4t source code by using source_sync.sh, which can be downloaded from ~/nvidia/nvidia_sdk/jetpack_x.y.z_linux_jetson_tx2_targets/linux_for_tegra/source_sync.sh if you ever have flashed the system using sdkmanager (you should have). using this official script is easier to make sure downloaded sources are complete with matching versions of each subdirectories etc. mkdir -p ~/tx2_source_build/r32-3-1_release_v1.0 cd ~/tx2_source_build/r32-3-1_release_v1.0 ./source_sync.sh -k tegra-l4t-r32.3.1 after successfully ran the scipt, you should see a sources directory:\n$ tree -l 2 ./sources ./sources ├── hardware │ └── nvidia └── kernel ├── kernel-4.9 ├── nvgpu └── nvidia prepare and compile the kernel mkdir build mkdir modules export tegra_kernel_out=~/tx2_source_build/r32-3-1_release_v1.0/build export tegra_modules_out=~/tx2_source_build/r32-3-1_release_v1.0/modules export src=~/tx2_source_build/r32-3-1_release_v1.0/sources/kernel/kernel-4.9/ export arch=arm64 export cross_compile=~/src_install/l4t-gcc/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu- now overwrite the .config with the reserved/saved .config file into tegra_kernel_out (again, see this post about how and why to get the .config file from freshly flashed system instead of config it live); patch the kernels; then cross-compile. this process is refering the intel librealsense script patch-realsense-ubuntu-l4t.sh.\ncd $src # apply the librealsense patches cp -r ~/tx2_source_build/librealsense/scripts/tegra/lrs_patches . cp ~/tx2_source_build/config.gz.backup/tx2_devkit.r32.3.1.config ./.config echo -e \u0026#34;\\e[32mupdate the kernel tree to support hid imu sensors\\e[0m\u0026#34; sed -i \u0026#39;/config_hid_sensor_accel_3d/c\\config_hid_sensor_accel_3d=m\u0026#39; .config sed -i \u0026#39;/config_hid_sensor_gyro_3d/c\\config_hid_sensor_gyro_3d=m\u0026#39; .config sed -i \u0026#39;/config_hid_sensor_iio_common/c\\config_hid_sensor_iio_common=m\\nconfig_hid_sensor_iio_trigger=m\u0026#39; .config echo -e \u0026#34;\\e[32mapply librealsense kernel patches\\e[0m\u0026#34; patch -p1 \u0026lt; ./lrs_patches/02-realsense-metadata-l4t-4.4.patch patch -p1 \u0026lt; ./lrs_patches/03-realsense-hid-l4t-4.9.patch patch -p1 \u0026lt; ./lrs_patches/05-realsense-powerlinefrequency-control-fix.patch # the original 01-realsense-camera-formats-l4t-4.4.patch caused problem in patched # v4l2-ioctl.c, so i modified a local version, which can be found in this blog directory on github. #patch -p1 \u0026lt; ./lrs_patches/01-realsense-camera-formats-l4t-4.4.patch cp ~/tx2_source_build/01-realsense-camera-formats-l4t-4.4.mod.patch ./lrs_patches patch -p1 \u0026lt; ./lrs_patches/01-realsense-camera-formats-l4t-4.4.mod.patch # overwrite the .config files cp ./.config $tegra_kernel_out/.config mv ./.config $tegra_modules_out/.config # now compile make arch=arm64 o=$tegra_kernel_out -j11 image make arch=arm64 o=$tegra_modules_out -j11 modules # build everything make arch=arm64 o=$tegra_modules_out -j11 ## more specifically, if incremental building on an earlier unpatched source tree #make arch=arm64 m=drivers/media/usb/uvc o=$tegra_modules_out -j11 modules #make arch=arm64 m=drivers/media/v4l2-core o=$tegra_modules_out -j11 modules #make arch=arm64 m=drivers/iio o=$tegra_modules_out -j11 modules ## these are the modified modules export tegra_tag=tegra-l4t-r32.3.1 #pushd $tegra_modules_out #echo -e \u0026#34;\\e[32mcopying the patched modules to (~/) \\e[0m\u0026#34; #cp drivers/media/usb/uvc/uvcvideo.ko ~/${tegra_tag}-uvcvideo.ko #cp drivers/media/v4l2-core/videobuf-vmalloc.ko ~/${tegra_tag}-videobuf-vmalloc.ko #cp drivers/media/v4l2-core/videobuf-core.ko ~/${tegra_tag}-videobuf-core.ko #cp drivers/iio/common/hid-sensors/hid-sensor-iio-common.ko ~/${tegra_tag}-hid-sensor-iio-common.ko #cp drivers/iio/common/hid-sensors/hid-sensor-trigger.ko ~/${tegra_tag}-hid-sensor-trigger.ko #cp drivers/iio/accel/hid-sensor-accel-3d.ko ~/${tegra_tag}-hid-sensor-accel-3d.ko #cp drivers/iio/gyro/hid-sensor-gyro-3d.ko ~/${tegra_tag}-hid-sensor-gyro-3d.ko #popd # install built modules to some directory mkdir ~/tx2_source_build/r32-3-1_release_v1.0/modules_install sudo make arch=arm64 o=$tegra_modules_out modules_install install_mod_path=~/tx2_source_build/r32-3-1_release_v1.0/modules_install/ install built kernel/modules to system copy $tegra_kernel_out/arch/arm64/boot/image and modules_install/* respectively to tx2_system:/boot/image and /lib/modules/, and reboot the system will use our newly built kernel/modules etc.\nthe above way will overwrite original system kernel/modules, however, it would be better to back up original kernel image to image.backup, and then edit /boot/extlinux/extlinux.cfg:\ntimeout 30 default primary menu title l4t boot options label primary menu label primary kernel linux /boot/image.r200_patched initrd /boot/initrd append ${cbootargs} quiet # append ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 # when testing a custom kernel, it is recommended that you create a backup of # the original kernel and add a new entry to this file so that the device can # fallback to the original kernel. to do this: # # 1, make a backup of the original kernel # sudo cp /boot/image /boot/image.backup # # 2, copy your custom kernel into /boot/image # # 3, uncomment below menu setting lines for the original kernel # # 4, reboot label backup menu label backup kernel linux /boot/image.backup initrd /boot/initrd append ${cbootargs} quiet run realsense r200 example apps on the patched jetson tx2 system:\nget the the latest sdk/library that supports the legacy realsense r200 camera is v1.12.4 wget https://github.com/intelrealsense/librealsense/archive/refs/tags/v1.12.4.tar.gz tar xvfz ./v1.12.4.tar.gz build examples cd librealsense-1.12.4 mkdir build \u0026amp;\u0026amp; cd build cmake .. -dbuild_examples:bool=true make -j4 you will find these compiled successfully:\nnvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls examples/ cmakefiles cpp-callback cpp-config-ui cpp-motion-module cpp-restart cpp-tutorial-2-streams c-tutorial-2-streams cmake_install.cmake cpp-callback-2 cpp-enumerate-devices cpp-multicam cpp-stride cpp-tutorial-3-pointcloud c-tutorial-3-pointcloud cpp-alignimages cpp-capture cpp-headless cpp-pointcloud cpp-tutorial-1-depth c-tutorial-1-depth makefile nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls -al *.so* lrwxrwxrwx 1 nvidia nvidia 17 jun 3 14:46 librealsense.so -\u0026gt; librealsense.so.1 lrwxrwxrwx 1 nvidia nvidia 22 jun 3 14:46 librealsense.so.1 -\u0026gt; librealsense.so.1.12.4 -rwxrwxr-x 1 nvidia nvidia 11547184 jun 3 14:46 librealsense.so.1.12.4 nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ./examples/cpp-tutorial-2-streams there are 1 connected realsense devices. using device 0, an intel realsense r200 serial number: xxxxxxxx firmware version: 1.0.72.06 run on-board csi camera gst-launch-1.0 nvarguscamerasrc ! nvvidconv ! xvimagesink ","title":"06032024_r200_cam_on_TX2"},{"date":"2024-06-01","image":"","imageAlt":"","link":"https://jinchenglee.github.io/blog/my-first-post/","summary":"This is my first blog using Hugo generated contents backed by github.io.\nIt records how to add new blog article using markdown.\nSteps to add a blog article Go to synced down blog_markdown. Create new markdown file. cd blog_markdown/vitob-blog hugo new content blog/xxx.md Edit xxx.md Preview by running \u0026lsquo;$\u0026gt; hugo server -D\u0026rsquo; Continue; Steps to publish If satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.","tags":[],"text":"this is my first blog using hugo generated contents backed by github.io.\nit records how to add new blog article using markdown.\nsteps to add a blog article go to synced down blog_markdown. create new markdown file. cd blog_markdown/vitob-blog hugo new content blog/xxx.md edit xxx.md preview by running \u0026lsquo;$\u0026gt; hugo server -d\u0026rsquo; continue; steps to publish if satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.md. then run \u0026lsquo;$\u0026gt; hugo\u0026rsquo; to generate contents under public subdirectory. copy or move public/* to synced down github.io repository and then push it to github. ","title":"My First Post"},{"date":"2024-06-01","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/my-first-post/","summary":"This is my first blog using Hugo generated contents backed by github.io.\nIt records how to add new blog article using markdown.\nSteps to add a blog article Go to synced down blog_markdown. Create new markdown file. cd blog_markdown/vitob-blog hugo new content posts/\u0026lt;dir name\u0026gt;/index.md Edit xxx.md Preview by running \u0026lsquo;$\u0026gt; hugo server -D\u0026rsquo; Continue; Steps to publish If satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.","tags":[],"text":"this is my first blog using hugo generated contents backed by github.io.\nit records how to add new blog article using markdown.\nsteps to add a blog article go to synced down blog_markdown. create new markdown file. cd blog_markdown/vitob-blog hugo new content posts/\u0026lt;dir name\u0026gt;/index.md edit xxx.md preview by running \u0026lsquo;$\u0026gt; hugo server -d\u0026rsquo; continue; steps to publish if satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.md. then run \u0026lsquo;$\u0026gt; hugo\u0026rsquo; to generate contents under public subdirectory. copy or move public/* to synced down github.io repository and then push it to github. ","title":"My First Post"}]
}

