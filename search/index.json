
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-06-10","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/","summary":"#Yocto on TX2 with Jetpack4.3\nThis blog tries to build TX2 image with industry-default flow for embedded system \u0026ndash; the Yocto project, for ancient Jetson TX2 with Jetpack 4.3 (L4T R32.3.1).\nDefault meta-tegra build Sync down meta-tegra with right branch dunfell-l4t-r32.3.1. Also, please check L4T R32.3.1 Notes. cd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43 \u0026amp;\u0026amp; cd yocto-tx2-jp43 git clone https://github.com/OE4T/meta-tegra.git cd meta-tegra git branch -a git checkout dunfell-l4t-r32.3.1 Sync down poky with right branch dunfell.","tags":[],"text":"#yocto on tx2 with jetpack4.3\nthis blog tries to build tx2 image with industry-default flow for embedded system \u0026ndash; the yocto project, for ancient jetson tx2 with jetpack 4.3 (l4t r32.3.1).\ndefault meta-tegra build sync down meta-tegra with right branch dunfell-l4t-r32.3.1. also, please check l4t r32.3.1 notes. cd ~ \u0026amp;\u0026amp; mkdir yocto-tx2-jp43 \u0026amp;\u0026amp; cd yocto-tx2-jp43 git clone https://github.com/oe4t/meta-tegra.git cd meta-tegra git branch -a git checkout dunfell-l4t-r32.3.1 sync down poky with right branch dunfell. cd ~/yocto-tx2-jp32 git clone https://github.com/yoctoproject/poky.git cd poky git branch -a git checkout dunfell active environment source poky/oe-init-build-env add configurations to build/conf/local.conf machine ??= \u0026#34;jetson-tx2\u0026#34; dl_dir ?= \u0026#34;/home/${user}/yocto/downloads\u0026#34; sstate_dir ?= \u0026#34;/home/${user}/yocto/sstate_dir\u0026#34; image_classes += \u0026#34;image_types_tegra\u0026#34; preferred_version_python3 = \u0026#34;3.8%\u0026#34; preferred_version_python3-native = \u0026#34;3.8%\u0026#34; bb_number_threads = \u0026#39;11\u0026#39; parallel_make = \u0026#39;-j11\u0026#39; add configuration to build/conf/bblayers.conf /home/${user}/yocto-tegra/meta-tegra \\ the bblayers.conf looks like:\n#// poky_bblayers_conf_version is increased each time build/conf/bblayers.conf #// changes incompatibly poky_bblayers_conf_version = \u0026#34;2\u0026#34; bbpath = \u0026#34;${topdir}\u0026#34; bbfiles ?= \u0026#34;\u0026#34; bblayers ?= \u0026#34; \\ /home/${user}/yocto-tegra/meta-tegra \\ /home/${user}/yocto-tx2-jp43/poky/meta \\ /home/${user}/yocto-tx2-jp43/poky/meta-poky \\ /home/${user}/yocto-tx2-jp43/poky/meta-yocto-bsp \\ \u0026#34; build core-image-minimal. bitbake core-image-minimal successful completion of the built shows sth. like below. i\u0026rsquo;m running on a previously built cache, so a lot of tasks don\u0026rsquo;t need re-run. if you are running from scratch, this process can take pretty long depending on your host machine (~hours).\n@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal loading cache: 100% |#####################################################################################################| time: 0:00:00 loaded 1486 entries from dependency cache. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;ubuntu-18.04\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; initialising tasks: 100% |################################################################################################| time: 0:00:01 sstate summary: wanted 1203 found 1199 missed 4 current 0 (99% match, 0% complete) note: executing tasks note: tasks summary: attempted 3200 tasks of which 2952 didn\u0026#39;t need to be rerun and all succeeded. deploy using this script:\n#!/bin/bash image=$1 machine=$2 scriptdir=\u0026#34;$( cd \u0026#34;$( dirname \u0026#34;${bash_source[0]}\u0026#34; )\u0026#34; \u0026gt;/dev/null \u0026amp;\u0026amp; pwd )\u0026#34; deployfile=${image}-${machine}.tegraflash.zip tmpdir=`mktemp` rm -rf $tmpdir mkdir -p $tmpdir echo \u0026#34;using temp directory $tmpdir\u0026#34; pushd $tmpdir cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile . unzip $deployfile set -e sudo ./doflash.sh popd echo \u0026#34;removing temp directory $tmpdir\u0026#34; rm -rf $tmpdir put jetson tx2 development kit into force recovery mode by:\npress down rec button and not release press down power button and release release rec button to make sure the board has entered recoverage mode, check lsusb on host:\nxxx@ubuntu18:~/yocto-tegra$ lsusb ... bus 003 device 013: id 0955:7c18 nvidia corp. \u0026lt;= check this line. ... run the deploy command:\n:~/yocto-tx2-jp43$ sudo ./deploy.sh core-image-minimal jetson-tx2 on the debug serial port or the connected monitor to tx2, you should see this:\npoky (yocto project reference distro) 3.1.33 jetson-tx2 /dev/ttyxxx jetson-tx2 login: using root without password should login you in.\nbuild core-image-sato-dev similarly, we can build an image with gui from yocto:\nbitbake core-image-sato-dev using the same deploy.sh script to flash:\nsudo ./deploy.sh core-image-sato-dev jetson-tx2 patch kernel with preempt-rt preempt-rt patches are for real-time applications on linux. the patching process described below refers to these links:\npreempt-rt patches for jetson nano applying preempt rt patches dunfell l4t r32.4.3 getting ready for kernel-dev using devtool according to yocto doc. update local.conf file:\nmachine_essential_extra_rrecommends += \u0026#34;kernel-modules\u0026#34; create a layer for patches and inform bitbake build env about the newly added layer: xxx@ubuntu18:~/yocto-tx2-jp43$ cd build/ xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers create-layer ../meta-tx2-jp43 note: starting bitbake server... add your new layer with \u0026#39;bitbake-layers add-layer ../meta-tx2-jp43\u0026#39; xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers add-layer ../meta-tx2-jp43/ note: starting bitbake server... the last commad will add the newly added layer to your build/conf/bblayers.conf\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ cat conf/bblayers.conf #// poky_bblayers_conf_version is increased each time build/conf/bblayers.conf #// changes incompatibly poky_bblayers_conf_version = \u0026#34;2\u0026#34; bbpath = \u0026#34;${topdir}\u0026#34; bbfiles ?= \u0026#34;\u0026#34; bblayers ?= \u0026#34; \\ /home/${user}/yocto-tegra/meta-tegra \\ /home/${user}/yocto-tx2-jp43/poky/meta \\ /home/${user}/yocto-tx2-jp43/poky/meta-poky \\ /home/${user}/yocto-tx2-jp43/poky/meta-yocto-bsp \\ /home/\u0026lt;your user name\u0026gt;/yocto-tx2-jp43/meta-tx2-jp43 \\ \u0026#34; bitbake core-image-minimal to make sure everything is ok. @ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal parsing recipes: 100% |###################################################################################################| time: 0:00:12 parsing of 876 .bb files complete (0 cached, 876 parsed). 1487 targets, 74 skipped, 0 masked, 0 errors. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;universal\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; meta-tx2-jp43 = \u0026#34;\u0026lt;unknown\u0026gt;:\u0026lt;unknown\u0026gt;\u0026#34; \u0026lt;= notice the blank \u0026#34;unknown\u0026#34; here! initialising tasks: 100% |################################################################################################| time: 0:00:01 sstate summary: wanted 367 found 359 missed 8 current 836 (97% match, 99% complete) note: executing tasks note: tasks summary: attempted 3200 tasks of which 3186 didn\u0026#39;t need to be rerun and all succeeded. using devtool to patch the kernel according to yocto doc.\ncheck out kernel source files. xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool modify linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... loading cache: 100% |#####################################################################################################| time: 0:00:00 loaded 1487 entries from dependency cache. note: resolving any missing task queue dependencies build configuration: bb_version = \u0026#34;1.46.0\u0026#34; build_sys = \u0026#34;x86_64-linux\u0026#34; nativelsbstring = \u0026#34;universal\u0026#34; target_sys = \u0026#34;aarch64-poky-linux\u0026#34; machine = \u0026#34;jetson-tx2\u0026#34; distro = \u0026#34;poky\u0026#34; distro_version = \u0026#34;3.1.33\u0026#34; tune_features = \u0026#34;aarch64 armv8a crc\u0026#34; target_fpu = \u0026#34;\u0026#34; meta-tegra = \u0026#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d\u0026#34; meta meta-poky meta-yocto-bsp = \u0026#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2\u0026#34; meta-tx2-jp43 workspace = \u0026#34;\u0026lt;unknown\u0026gt;:\u0026lt;unknown\u0026gt;\u0026#34; initialising tasks: 100% |################################################################################################| time: 0:00:00 sstate summary: wanted 55 found 54 missed 1 current 50 (98% match, 99% complete) note: executing tasks note: tasks summary: attempted 474 tasks of which 463 didn\u0026#39;t need to be rerun and all succeeded. info: adding local source files to srctree... info: copying kernel config to srctree info: source tree extracted to /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra info: recipe linux-tegra now set up to build from /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra patch the kernel source and build the kernel: xxx@ubuntu18:~/yocto-tx2-jp43/build/workspace/sources/linux-tegra$ ./scripts/rt-patch.sh apply-patches preempt rt patches successfully applied for auto! preempt rt patches successfully applied for l4t! using git status can see a bunch of files are modified and another bunch are added. however, when trying to build kernel exposes build errors:\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... ... note: executing tasks note: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra error: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: oe_runmake failed error: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: execution of \u0026#39;/home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/run.do_compile_kernelmodules.17505\u0026#39; failed with exit code 1 error: logfile of failure stored in: /home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/log.do_compile_kernelmodules.17505 (details:) ... /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c:1606:23: error: passing argument 1 of \u0026#39;waitqueue_active\u0026#39; from incompatible pointer type [-werror=incompatible-pointer-types] 1606 | if (waitqueue_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | | | struct swait_queue_head * ... $ vim ~/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c 1600 #if is_enabled(config_preempt_rt_full) 1601 if (swait_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) 1602 #else 1603 #if linux_version_code \u0026gt;= kernel_version(4, 14, 57) 1604 if (waitqueue_active((struct wait_queue_head *)\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) 1605 #else 1606 if (waitqueue_active(\u0026amp;_pno_state-\u0026gt;get_batch_done.wait)) \u0026lt;= error here! 1607 #endif 1608 #endif modify kernel configuration google around shows the error could be avoided if config_preempt_rt_full is defined in .config before kernel compilation. (btw, there is another fix option here but i don\u0026rsquo;t try this way.)\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake -c menuconfig virtual/kernel select \u0026ldquo;kernel features -\u0026gt; preemption model (\u0026hellip;)\u0026rdquo; and select \u0026ldquo;fully preemptible kernel (rt)\u0026rdquo;.\nsave the modified kernel configuration $ bitbake -c savedefconfig virtual/kernel $ cp ./tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/linux-tegra-4.9.140+git999/defconfig ./workspace/sources/linux-tegra/arch/arm64/configs/defconfig now compile again, it should finish successfully.\nxxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra note: starting bitbake server... note: reconnecting to bitbake server... note: retrying server connection (#1)... ... warning: /home/xxx/yocto-tegra/meta-tegra/recipes-kernel/linux/linux-tegra_4.9.bb:do_compile is tainted from a forced run eta: 0:00:00 initialising tasks: 100% |################################################################################################| time: 0:00:02 sstate summary: wanted 324 found 322 missed 2 current 698 (99% match, 99% complete) note: executing tasks note: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra note: tasks summary: attempted 2648 tasks of which 2627 didn\u0026#39;t need to be rerun and all succeeded. summary: there was 1 warning message shown. create the image with modified kernel $ devtool build-image core-image-sato-dev flash the tx2 and you can see the patched kernel bootstrap successfully.\nroot@jetson-tx2:~# uname -a linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 smp preempt rt mon jun 10 18:20:28 utc 2024 aarch64 aarch64 aarch64 gnu/linux save the patch work for future use stage and commit local changes to the kernel $ cd workspace/sources/linux-tegra -- commit everything (new and modifed) --- commit 9d4a27452b73870aa07a13883818284c310331e3 (head -\u0026gt; patches-l4t-r32.3.1) author: openembedded \u0026lt;oe.patch@oe\u0026gt; date: mon jun 10 12:38:42 2024 -0700 my patch for jetson tx2 with jetpack 4.3/l4t r32.3.1 and preempt-rt. -- save a copy of defconfig and localversion_auto.cfg to dl_dir (defined in local.conf). $ cp defconfig ~/yocto/downloads/ $ cp localversion_auto.cfg ~/yocto/downloads/ -- export the changes in the commit as patches and create a .bbappend file in layer specificed (meta-tx2-jp43): $ devtool finish linux-tegra ../meta-tx2-jp43 $:~/yocto-tx2-jp43$ tree meta-tx2-jp43 meta-tx2-jp43 ├── conf │ └── layer.conf ├── copying.mit ├── readme ... └── recipes-kernel └── linux ├── linux-tegra-4.9 │ ├── 0001-my-patch-for-jetson-tx2-with-jetpack-4.3-l4t-r32.3.1.patch │ └── devtool-fragment.cfg └── linux-tegra_4.9.bb create a repository for the layer created the layer on github repo. yocto build with rt patch from scratch now we can use yocto and our customized layer to build rt-patched linux from scratch for jetson tx2 with jetpack 4.3 and l4t r32.3.1.\ngit clone https://github.com/oe4t/meta-tegra.git cd meta-tegra \u0026amp;\u0026amp; git checkout dunfell-l4t-r32.3.1 \u0026amp;\u0026amp; cd .. git clone https://github.com/yoctoproject/poky.git cd poky \u0026amp;\u0026amp; git checkout dunfell \u0026amp;\u0026amp; cd .. git clone https://github.com/jinchenglee/meta-tx2-jp43 source poky/oe-init-build-env #// make necessary changes to build/conf/local.conf and build/conf/bblayers.conf #// for example, add below to local.conf: #// #//extra_image_features ?= \u0026#34;debug-tweaks tools-sdk package-management\u0026#34; #//package_classes ?= \u0026#34;package_deb\u0026#34; bitbake core-image-sato-dev ","title":"Yocto on TX2 with Jetpack4.3"},{"date":"2024-06-04","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/","summary":"RealSense R200 on Jetson TX2 with Auvidea J120 carrier board Patch Jetpack 4.3 (L4T R32.3.1) with Auvidea J120 firmware v3.0 according to the README file in the tarball. \u0026ndash; As a side note, I cannot get latest v4.0 firmware to work with Jetpack 4.6, both USB ports on J120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware. \u0026ndash; Even with v3.0 firmware, there are some issues to live with: 1) only the top USB port is 3.","tags":[],"text":"realsense r200 on jetson tx2 with auvidea j120 carrier board patch jetpack 4.3 (l4t r32.3.1) with auvidea j120 firmware v3.0 according to the readme file in the tarball. \u0026ndash; as a side note, i cannot get latest v4.0 firmware to work with jetpack 4.6, both usb ports on j120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware. \u0026ndash; even with v3.0 firmware, there are some issues to live with: 1) only the top usb port is 3.0, the bottom usb port is only 2.0; 2) the fan seems not working (cannot be detected by jtop).\nflash the patched l4t to tx2 on j120 board\nclone librealsense2.\ngit clone https://github.com/intelrealsense/librealsense.git as of when this blog is being written, this commit is used:\ncommit ff8a9fb213ec1227394de4060743b0ed61171985 (head -\u0026gt; master, origin/master, origin/head) merge: 4673a37d9 488c6ec3e author: eran \u0026lt;librealsense.eran@gmail.com\u0026gt; date: sun apr 21 12:01:57 2024 +0300 pr #12864: merge v2.55.1 to master run permissions script from librealsense2 tot directory. # need to install v4l-utils first sudo apt install v4l-utils ./scripts/setup_udev_rules.sh build and apply patched kernel modules. ./scripts/patch-realsense-ubuntu-l4t.sh check the log file of this script: librealsense.patch.tx2.on.j120.log inside this blog github directory.\nfollow section run realsense r200 example apps of previous blog to r200 examples.\ninstall sdk\nsudo apt install nvidia-jetpack ","title":"06042024_r200_cam_on_TX2_J120"},{"date":"2024-06-04","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/","summary":"RealSense R200 Camera on Jetson TX2 with L4T R32.3.1 Both RealSense R200 camera and NVidia Jetson TX2 are considered legacy hardwares today (when this post is written at June, 2024) and are replaced by their newly released siblings that are more capable and fancier. However, I happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.\nJetpack and L4T versions For some practical reason (I only got Auvidea J120 TX2 carrier board patching firmware v3.","tags":[],"text":"realsense r200 camera on jetson tx2 with l4t r32.3.1 both realsense r200 camera and nvidia jetson tx2 are considered legacy hardwares today (when this post is written at june, 2024) and are replaced by their newly released siblings that are more capable and fancier. however, i happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.\njetpack and l4t versions for some practical reason (i only got auvidea j120 tx2 carrier board patching firmware v3.0, released on feb 2020, working with jp4.3; the latest j120 v4.0 firmware released on dec 2021 doesn\u0026rsquo;t work for me on jp4.6/l4t32.6.1), i chose jetpack 4.3 and l4t32.3.1 as the starting point on jetson tx2. this post talks about getting everything work on jetson tx2 development kit, not on j120 carrier board though. as a note for completeness, jetson tx2 latest sdk is jetpack 4.6.4, which couples with l4t 32.7.4. realsense r200 sdk/library the latest sdk/library that supports the legacy realsense r200 camera is v1.12.4, which seems a final release following the earlier said \u0026ldquo;final\u0026rdquo; release v1.12.1.\nthese blogs are good references:\nrunning the realsense r200 camera with librealsense and pyrealsense legacy libraries: link. intel librealsense installation doc, which was written for librealsense v2.0, however, this section works for v1.12.x which supports realsense r200. patch on jetson tx2 directly (not repeat all the details here, only for guidance, mileage varies if followed exactly below\u0026hellip;)\non a freshly flashed tx2, follow the guidance listed on intel librealsense installation:\nclone librealsense2. git clone https://github.com/intelrealsense/librealsense.git as of when this blog is being written, this commit is used:\ncommit ff8a9fb213ec1227394de4060743b0ed61171985 (head -\u0026gt; master, origin/master, origin/head) merge: 4673a37d9 488c6ec3e author: eran \u0026lt;librealsense.eran@gmail.com\u0026gt; date: sun apr 21 12:01:57 2024 +0300 pr #12864: merge v2.55.1 to master run permissions script from librealsense2 tot directory. ./scripts/setup_udev_rules.sh build and apply patched kernel modules. ./scripts/patch-realsense-ubuntu-l4t.sh build linux kernel from source on x86 host the patching process can be done on jetson tx2 itself (maybe simpler in that way as well) after flashing it with nvidia sdkmanager with the right version of l4t mentioned above. however, since i\u0026rsquo;m considering deploy yocto onto the same platform as a later step, it is better to start with x86 host patching.\ngood advices about building kernel from source on x86 host for jetson platform:\nauvidea j120 and intel realsense d435: link tx2i wifi support (the title is irrelevant but the message pointed to is good reference about general kernel compile from source): link general l4t kernel customization reference from official documentation of l4t.\nprerequesites since we are building for a legacy system, ubuntu 18.04 lts is needed on x86. $ lsb_release -a no lsb modules are available. distributor id:\tubuntu description:\tubuntu 18.04.6 lts release:\t18.04 codename:\tbionic a .config is preferred to be copied and saved from a freshly flashed tx2 to be used in later source compilation. how and why here.\ninstall cross-compile toolchain, following jetson linux driver package toolchain to install necessary tools.\nsync down the earlier mentioned librealsense git repository as mentioned in patch on jetson tx2.\ncompile get l4t source code by using source_sync.sh, which can be downloaded from ~/nvidia/nvidia_sdk/jetpack_x.y.z_linux_jetson_tx2_targets/linux_for_tegra/source_sync.sh if you ever have flashed the system using sdkmanager (you should have). using this official script is easier to make sure downloaded sources are complete with matching versions of each subdirectories etc. mkdir -p ~/tx2_source_build/r32-3-1_release_v1.0 cd ~/tx2_source_build/r32-3-1_release_v1.0 ./source_sync.sh -k tegra-l4t-r32.3.1 after successfully ran the scipt, you should see a sources directory:\n$ tree -l 2 ./sources ./sources ├── hardware │ └── nvidia └── kernel ├── kernel-4.9 ├── nvgpu └── nvidia prepare and compile the kernel mkdir build mkdir modules export tegra_kernel_out=~/tx2_source_build/r32-3-1_release_v1.0/build export tegra_modules_out=~/tx2_source_build/r32-3-1_release_v1.0/modules export src=~/tx2_source_build/r32-3-1_release_v1.0/sources/kernel/kernel-4.9/ export arch=arm64 export cross_compile=~/src_install/l4t-gcc/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu- now overwrite the .config with the reserved/saved .config file into tegra_kernel_out (again, see this post about how and why to get the .config file from freshly flashed system instead of config it live); patch the kernels; then cross-compile. this process is refering the intel librealsense script patch-realsense-ubuntu-l4t.sh.\ncd $src # apply the librealsense patches cp -r ~/tx2_source_build/librealsense/scripts/tegra/lrs_patches . cp ~/tx2_source_build/config.gz.backup/tx2_devkit.r32.3.1.config ./.config echo -e \u0026#34;\\e[32mupdate the kernel tree to support hid imu sensors\\e[0m\u0026#34; sed -i \u0026#39;/config_hid_sensor_accel_3d/c\\config_hid_sensor_accel_3d=m\u0026#39; .config sed -i \u0026#39;/config_hid_sensor_gyro_3d/c\\config_hid_sensor_gyro_3d=m\u0026#39; .config sed -i \u0026#39;/config_hid_sensor_iio_common/c\\config_hid_sensor_iio_common=m\\nconfig_hid_sensor_iio_trigger=m\u0026#39; .config echo -e \u0026#34;\\e[32mapply librealsense kernel patches\\e[0m\u0026#34; patch -p1 \u0026lt; ./lrs_patches/02-realsense-metadata-l4t-4.4.patch patch -p1 \u0026lt; ./lrs_patches/03-realsense-hid-l4t-4.9.patch patch -p1 \u0026lt; ./lrs_patches/05-realsense-powerlinefrequency-control-fix.patch # the original 01-realsense-camera-formats-l4t-4.4.patch caused problem in patched # v4l2-ioctl.c, so i modified a local version, which can be found in this blog directory on github. #patch -p1 \u0026lt; ./lrs_patches/01-realsense-camera-formats-l4t-4.4.patch cp ~/tx2_source_build/01-realsense-camera-formats-l4t-4.4.mod.patch ./lrs_patches patch -p1 \u0026lt; ./lrs_patches/01-realsense-camera-formats-l4t-4.4.mod.patch # overwrite the .config files cp ./.config $tegra_kernel_out/.config mv ./.config $tegra_modules_out/.config # now compile make arch=arm64 o=$tegra_kernel_out -j11 image make arch=arm64 o=$tegra_modules_out -j11 modules # build everything make arch=arm64 o=$tegra_modules_out -j11 ## more specifically, if incremental building on an earlier unpatched source tree #make arch=arm64 m=drivers/media/usb/uvc o=$tegra_modules_out -j11 modules #make arch=arm64 m=drivers/media/v4l2-core o=$tegra_modules_out -j11 modules #make arch=arm64 m=drivers/iio o=$tegra_modules_out -j11 modules ## these are the modified modules export tegra_tag=tegra-l4t-r32.3.1 #pushd $tegra_modules_out #echo -e \u0026#34;\\e[32mcopying the patched modules to (~/) \\e[0m\u0026#34; #cp drivers/media/usb/uvc/uvcvideo.ko ~/${tegra_tag}-uvcvideo.ko #cp drivers/media/v4l2-core/videobuf-vmalloc.ko ~/${tegra_tag}-videobuf-vmalloc.ko #cp drivers/media/v4l2-core/videobuf-core.ko ~/${tegra_tag}-videobuf-core.ko #cp drivers/iio/common/hid-sensors/hid-sensor-iio-common.ko ~/${tegra_tag}-hid-sensor-iio-common.ko #cp drivers/iio/common/hid-sensors/hid-sensor-trigger.ko ~/${tegra_tag}-hid-sensor-trigger.ko #cp drivers/iio/accel/hid-sensor-accel-3d.ko ~/${tegra_tag}-hid-sensor-accel-3d.ko #cp drivers/iio/gyro/hid-sensor-gyro-3d.ko ~/${tegra_tag}-hid-sensor-gyro-3d.ko #popd # install built modules to some directory mkdir ~/tx2_source_build/r32-3-1_release_v1.0/modules_install sudo make arch=arm64 o=$tegra_modules_out modules_install install_mod_path=~/tx2_source_build/r32-3-1_release_v1.0/modules_install/ install built kernel/modules to system copy $tegra_kernel_out/arch/arm64/boot/image and modules_install/* respectively to tx2_system:/boot/image and /lib/modules/, and reboot the system will use our newly built kernel/modules etc.\nthe above way will overwrite original system kernel/modules, however, it would be better to back up original kernel image to image.backup, and then edit /boot/extlinux/extlinux.cfg:\ntimeout 30 default primary menu title l4t boot options label primary menu label primary kernel linux /boot/image.r200_patched initrd /boot/initrd append ${cbootargs} quiet # append ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 # when testing a custom kernel, it is recommended that you create a backup of # the original kernel and add a new entry to this file so that the device can # fallback to the original kernel. to do this: # # 1, make a backup of the original kernel # sudo cp /boot/image /boot/image.backup # # 2, copy your custom kernel into /boot/image # # 3, uncomment below menu setting lines for the original kernel # # 4, reboot label backup menu label backup kernel linux /boot/image.backup initrd /boot/initrd append ${cbootargs} quiet run realsense r200 example apps on the patched jetson tx2 system:\nget the the latest sdk/library that supports the legacy realsense r200 camera is v1.12.4 wget https://github.com/intelrealsense/librealsense/archive/refs/tags/v1.12.4.tar.gz tar xvfz ./v1.12.4.tar.gz build examples cd librealsense-1.12.4 mkdir build \u0026amp;\u0026amp; cd build cmake .. -dbuild_examples:bool=true make -j4 you will find these compiled successfully:\nnvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls examples/ cmakefiles cpp-callback cpp-config-ui cpp-motion-module cpp-restart cpp-tutorial-2-streams c-tutorial-2-streams cmake_install.cmake cpp-callback-2 cpp-enumerate-devices cpp-multicam cpp-stride cpp-tutorial-3-pointcloud c-tutorial-3-pointcloud cpp-alignimages cpp-capture cpp-headless cpp-pointcloud cpp-tutorial-1-depth c-tutorial-1-depth makefile nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls -al *.so* lrwxrwxrwx 1 nvidia nvidia 17 jun 3 14:46 librealsense.so -\u0026gt; librealsense.so.1 lrwxrwxrwx 1 nvidia nvidia 22 jun 3 14:46 librealsense.so.1 -\u0026gt; librealsense.so.1.12.4 -rwxrwxr-x 1 nvidia nvidia 11547184 jun 3 14:46 librealsense.so.1.12.4 nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ./examples/cpp-tutorial-2-streams there are 1 connected realsense devices. using device 0, an intel realsense r200 serial number: xxxxxxxx firmware version: 1.0.72.06 run on-board csi camera gst-launch-1.0 nvarguscamerasrc ! nvvidconv ! xvimagesink ","title":"06032024_r200_cam_on_TX2"},{"date":"2024-06-01","image":"","imageAlt":"","link":"https://jinchenglee.github.io/blog/my-first-post/","summary":"This is my first blog using Hugo generated contents backed by github.io.\nIt records how to add new blog article using markdown.\nSteps to add a blog article Go to synced down blog_markdown. Create new markdown file. cd blog_markdown/vitob-blog hugo new content blog/xxx.md Edit xxx.md Preview by running \u0026lsquo;$\u0026gt; hugo server -D\u0026rsquo; Continue; Steps to publish If satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.","tags":[],"text":"this is my first blog using hugo generated contents backed by github.io.\nit records how to add new blog article using markdown.\nsteps to add a blog article go to synced down blog_markdown. create new markdown file. cd blog_markdown/vitob-blog hugo new content blog/xxx.md edit xxx.md preview by running \u0026lsquo;$\u0026gt; hugo server -d\u0026rsquo; continue; steps to publish if satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.md. then run \u0026lsquo;$\u0026gt; hugo\u0026rsquo; to generate contents under public subdirectory. copy or move public/* to synced down github.io repository and then push it to github. ","title":"My First Post"},{"date":"2024-06-01","image":"","imageAlt":"","link":"https://jinchenglee.github.io/posts/my-first-post/","summary":"This is my first blog using Hugo generated contents backed by github.io.\nIt records how to add new blog article using markdown.\nSteps to add a blog article Go to synced down blog_markdown. Create new markdown file. cd blog_markdown/vitob-blog hugo new content posts/\u0026lt;dir name\u0026gt;/index.md Edit xxx.md Preview by running \u0026lsquo;$\u0026gt; hugo server -D\u0026rsquo; Continue; Steps to publish If satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.","tags":[],"text":"this is my first blog using hugo generated contents backed by github.io.\nit records how to add new blog article using markdown.\nsteps to add a blog article go to synced down blog_markdown. create new markdown file. cd blog_markdown/vitob-blog hugo new content posts/\u0026lt;dir name\u0026gt;/index.md edit xxx.md preview by running \u0026lsquo;$\u0026gt; hugo server -d\u0026rsquo; continue; steps to publish if satisfied with preview at http://localhost:1313/, changing \u0026lsquo;draft = true\u0026rsquo; to \u0026lsquo;draft = false\u0026rsquo; in xxx.md. then run \u0026lsquo;$\u0026gt; hugo\u0026rsquo; to generate contents under public subdirectory. copy or move public/* to synced down github.io repository and then push it to github. ","title":"My First Post"}]
}

