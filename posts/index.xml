<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Vitob&#39;s Blog Site</title>
    <link>https://jinchenglee.github.io/posts/</link>
    <description>Recent content in Posts on Vitob&#39;s Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Dec 2024 11:30:39 -0800</lastBuildDate><atom:link href="https://jinchenglee.github.io/posts/index.xml" rel="self" type="application/rss+xml" /><icon>https://jinchenglee.github.io/img/icon.svg</icon>
    
    
    <item>
      <title>Orin Nano Camera DeviceTree and Overlay</title>
      <link>https://jinchenglee.github.io/posts/09212024_orin_nano_camera_devicetree_and_overlay/</link>
      <pubDate>Sat, 07 Dec 2024 11:30:39 -0800</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/09212024_orin_nano_camera_devicetree_and_overlay/</guid>
      <description><![CDATA[<h1 id="jetson-orin-nano-device-tree-and-overlay-for-csi-cameras">Jetson Orin Nano Device Tree and Overlay for CSI Cameras</h1>
<p>Recently I&rsquo;m turning to play with Jetson Orin Nano, trying to bring up Sony imx296 camera via one of its CSI port. Getting camera to work is quite involved, embedded Linux systems don&rsquo;t have such support of easy installing drivers for cameras. This blog records what I learned in the process.</p>
<h2 id="sku-and-jetpack-versions">SKU and Jetpack Versions</h2>
<p>These matters a lot when you try to bring up something on your Jetson system.</p>
<p>Jetpack is provided by NVidia, mainly for the BSP (board specific package?) SW, Embedded Linux for Tegra (L4T) and developing tools etc.</p>
<p>Hardware wise, besides the core board provided by NVidia, different carrier board vendors have different design, thus they need to &ldquo;patch&rdquo; the BSP appropriately.</p>
<p>In this blog, we&rsquo;ll focus on the stock Jetson Orin Nano Development Kit (8GB) - <code>Jetson Orin Nano Carrier board (P3768-0000)</code>, and <code>Jetson Orin Nano 8GB module (P3767-0003)</code> (guess these are the SKUs).</p>
<ul>
<li>
<p>The Jetpack versions can be figured out: <a href="https://developer.nvidia.com/embedded/jetpack">latest Jetpack</a>, or <a href="https://developer.nvidia.com/embedded/jetpack-archive">archived</a> ones.</p>
</li>
<li>
<p>The SKU for boards matter too. In <a href="https://docs.nvidia.com/jetson/archives/r36.3/ReleaseNotes/Jetson_Linux_Release_Notes_r36.3.pdf">L4T R36.3 Release Notes</a>, the Orin Series SKUs are listed:</p>
</li>
</ul>
<pre tabindex="0"><code>jetson-agx-orin-devkit-industrial.conf: Flashes the Jetson
Orin industrial module (P3701-0008), which is attached to a
Jetson Orin reference carrier board (P3737-0000).
jetson-orin-nano-devkit.conf: Flashes one of the following
modules that is attached to a Jetson Orin Nano Carrier
board (P3768-0000):
● Jetson Orin Nano developer kit module with SD Card
(P3767-0005)
● Jetson Orin Nano 8GB module (P3767-0003)
● Jetson Orin Nano 4GB module (P3767-0004)
● Jetson Orin NX 16GB module (P3767-0000)
● Jetson Orin NX 8GB module (P3767-0001)
jetson-agx-orin-devkit.conf: Flashes one of the following
modules that is attached to a Jetson AGX Orin Developer
Kit (P3730-0000) reference carrier board (P3737-0000):
● Jetson AGX Orin developer kit module (P3701-0000)
● Jetson AGX Orin 32GB module (P3701-0004)
● Jetson AGX Orin 64GB module (P3701-0005)
</code></pre><h2 id="orin-nano-default-devicetree-for-cameras">Orin Nano Default DeviceTree for Cameras</h2>
<p>Assume the L4T and Jetpack SW locates at <code>/work/l4t/r36.3/Linux_for_Tegra</code>.</p>
<ul>
<li>In file <code>jetson-orin-nano-devkit.conf</code>, you will notice this line:</li>
</ul>
<pre tabindex="0"><code>OVERLAY_DTB_FILE+=&#34;,tegra234-p3768-0000+p3767-0000-dynamic.dtbo&#34;;
</code></pre><p>This is, I guess, the overlay file that specifies the default camera setup for Orin Nano devkit.</p>
<ul>
<li>Tracing into <code>./source/hardware/nvidia/t23x/nv-public/overlay/tegra234-p3768-0000+p3767-0000-dynamic.dts</code>:</li>
</ul>
<pre tabindex="0"><code>#include &#34;tegra234-p3768-camera-rbpcv2-imx219.dtsi&#34;
</code></pre><ul>
<li>Tracing into <code>./source/hardware/nvidia/t23x/nv-public/overlay/tegra234-p3768-camera-rbpcv2-imx219.dtsi</code>. Here you find the default imx219 camera is used as default. This <a href="https://forums.developer.nvidia.com/t/xavier-nx-r32-7-1-changes-to-dtsi-overlay-for-cameras-has-no-effect/229204/10">article</a> from Nvidia developer&rsquo;s forum provides good hint.</li>
</ul>
<pre tabindex="0"><code>#define CAM0_RST        TEGRA234_MAIN_GPIO(H, 3)
#define CAM0_PWDN	TEGRA234_MAIN_GPIO(H, 6)
#define CAM1_PWDN	TEGRA234_MAIN_GPIO(AC, 0)
#define CAM_I2C_MUX 	TEGRA234_AON_GPIO(CC, 3)

#include &lt;dt-bindings/tegra234-p3767-0000-common.h&gt;
#include &#34;tegra234-camera-rbpcv2-imx219.dtsi&#34;

/ {
	fragment-camera-imx219@0 {
		target-path = &#34;/&#34;;
		__overlay__ {
			bus@0 {
				cam_i2cmux{
					status = &#34;okay&#34;;
					compatible = &#34;i2c-mux-gpio&#34;;
					#address-cells = &lt;1&gt;;
					#size-cells = &lt;0&gt;;
					i2c-parent = &lt;&amp;cam_i2c&gt;;
					mux-gpios = &lt;&amp;gpio_aon CAM_I2C_MUX GPIO_ACTIVE_HIGH&gt;;
					i2c@0 {
						status = &#34;okay&#34;;
						reg = &lt;0&gt;;
						#address-cells = &lt;1&gt;;
						#size-cells = &lt;0&gt;;
						rbpcv2_imx219_a@10 {
							reset-gpios = &lt;&amp;gpio CAM0_PWDN GPIO_ACTIVE_HIGH&gt;;
						};
					};
					i2c@1 {
						status = &#34;okay&#34;;
						reg = &lt;1&gt;;
						#address-cells = &lt;1&gt;;
						#size-cells = &lt;0&gt;;
						rbpcv2_imx219_c@10 {
							reset-gpios = &lt;&amp;gpio CAM1_PWDN GPIO_ACTIVE_HIGH&gt;;
						};
					};
				};
				gpio@2200000 {
					camera-control-output-low {
						gpio-hog;
						output-low;
						gpios = &lt;CAM0_RST 0&gt;;
						label = &#34;cam0-rst&#34;;
					};
				};
			};
		};
	};
};
</code></pre><h2 id="change-bootup-time-overlay">Change bootup time overlay</h2>
<p>Change /boot/extlinux/extlinux.config setting can change the boot options. Please remember to keep a backup version so you can always revert back to a known working kernel/state.</p>
<p>According to this forum <a href="https://forums.developer.nvidia.com/t/place-custom-overlay-file-via-extlinux-conf/298287/3">reply</a>, combination of FDT and OVERLAYS works, single FDT works, but single OVERLAYS line won&rsquo;t.</p>
<pre tabindex="0"><code>nvidia@ubuntu:~$ cat /boot/extlinux/extlinux.conf
TIMEOUT 30
DEFAULT primary

MENU TITLE L4T boot options

LABEL primary
      MENU LABEL primary kernel
      LINUX /boot/Image
      FDT /boot/dtb/kernel_tegra234-p3768-0000+p3767-0005-nv.dtb
      INITRD /boot/initrd
      APPEND ${cbootargs} root=PARTUUID=3c59f6a7-eb36-494c-be52-0bfab7f91e4b rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0 nospectre_bhb video=efifb:off console=tty0 nv-auto-config 
      OVERLAYS /boot/tegra234-p3767-camera-p3768-imx296-C.dtbo

LABEL backup
   MENU LABEL backup kernel
   LINUX /boot/Image.backup
   INITRD /boot/initrd
   APPEND ${cbootargs} root=PARTUUID=3c59f6a7-eb36-494c-be52-0bfab7f91e4b rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0 nospectre_bhb video=efifb:off console=tty0 nv-auto-config 
</code></pre><h2 id="load-your-camera-driver">Load your camera driver</h2>
<h2 id="confirm-port-binding-connections">Confirm Port Binding Connections</h2>
<p>According to NVidia official <a href="https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/CameraDevelopment/SensorSoftwareDriverProgramming.html#port-binding">doc</a>, this can be verified as below (camera -&gt; CSI -&gt; VI):</p>
<pre tabindex="0"><code>nvidia@ubuntu:~$ sudo media-ctl -p -d /dev/media0
[sudo] password for nvidia: 
Media controller API version 5.15.136

Media device information
------------------------
driver          tegra-camrtc-ca
model           NVIDIA Tegra Video Input Device
serial          
bus info        
hw revision     0x3
driver version  5.15.136

Device topology
- entity 1: 13e00000.host1x:nvcsi@15a00000- (2 pads, 2 links)
            type V4L2 subdev subtype Unknown flags 0
            device node name /dev/v4l-subdev0
	pad0: Sink
		&lt;- &#34;imx296 9-001a&#34;:0 [ENABLED]
	pad1: Source
		-&gt; &#34;vi-output, imx296 9-001a&#34;:0 [ENABLED]

- entity 4: imx296 9-001a (1 pad, 1 link)
            type V4L2 subdev subtype Sensor flags 0
            device node name /dev/v4l-subdev1
	pad0: Source
		[fmt:SRGGB10_1X10/1456x1088 field:none colorspace:srgb]
		-&gt; &#34;13e00000.host1x:nvcsi@15a00000-&#34;:0 [ENABLED]

- entity 6: vi-output, imx296 9-001a (1 pad, 1 link)
            type Node subtype V4L flags 0
            device node name /dev/video0
	pad0: Sink
		&lt;- &#34;13e00000.host1x:nvcsi@15a00000-&#34;:1 [ENABLED]
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Yocto L4T R32.3.1 on TX2 J120</title>
      <link>https://jinchenglee.github.io/posts/06282024_yocto_l4t_r32.3.1_on_tx2_j120/</link>
      <pubDate>Sat, 29 Jun 2024 21:06:18 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06282024_yocto_l4t_r32.3.1_on_tx2_j120/</guid>
      <description><![CDATA[<p>Finally we are here, with TX2 sitting on the J120 carrier board, we are ready to flash the setup with customized patched Yocto.</p>
<h2 id="yocto-on-tx2-j120-with-jetpack43">Yocto on TX2-J120 with Jetpack4.3</h2>
<h3 id="meta-tegra-poky-meta-tx2-jp43">Meta-tegra, Poky, meta-tx2-jp43</h3>
<p>Very similar to previous blog article <a href="ihttps://jinchenglee.github.io/posts/06102024_yocto_on_tx2/">Yocto on TX2 with Jetpack4.3</a>, we set up meta-tegra, poky, except that we need to setup layer meta-tx2-jp43 to a special branch for J120.</p>
<pre tabindex="0"><code>cd ~ &amp;&amp; mkdir yocto-tx2-jp43-j120 &amp;&amp; cd yocto-tx2-jp43-j120

git clone https://github.com/OE4T/meta-tegra.git 
cd meta-tegra
git branch -a
git checkout dunfell-l4t-r32.3.1

cd ~/yocto-tx2-jp43-j120
git clone https://github.com/yoctoproject/poky.git
cd poky
git branch -a
git checkout dunfell

cd ~/yocto-tx2-jp43-j120
git clone https://github.com/jinchenglee/meta-tx2-jp43.git
cd meta-tx2-jp43
git branch -a
git checkout dev/tx2-j120-jp43  # Special branch for TX2 on J120

cd ~/yocto-tx2-jp43-j120
source poky/oe-init-build-env
</code></pre><h3 id="localconf-and-bblayersconf">Local.conf and bblayers.conf</h3>
<ul>
<li>Changes in local.conf</li>
</ul>
<pre tabindex="0"><code>MACHINE ??= &#34;jetson-tx2&#34;

MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += &#34;kernel-modules&#34;

DL_DIR ?= &#34;/home/${USER}/Yocto/downloads&#34;

SSTATE_DIR ?= &#34;/home/${USER}/Yocto/sstate_dir&#34;

PACKAGE_CLASSES ?= &#34;package_deb&#34;  # for apt (?)
EXTRA_IMAGE_FEATURES ?= &#34;debug-tweaks tools-sdk package-management&#34;

IMAGE_CLASSES += &#34;image_types_tegra&#34;

PREFERRED_VERSION_python3 = &#34;3.8%&#34;
PREFERRED_VERSION_python3-native = &#34;3.8%&#34;

BB_NUMBER_THREADS = &#39;11&#39;
PARALLEL_MAKE = &#39;-j11&#39;

IMAGE_INSTALL_append = &#34; glfw cmake vim tmux&#34;
</code></pre><ul>
<li>Changes in bblayers.conf</li>
</ul>
<pre tabindex="0"><code>BBLAYERS ?= &#34; \
  /home/${USER}/yocto-tx2-jp43/meta-tegra \
  /home/${USER}/yocto-tx2-jp43/poky/meta \
  /home/${USER}/yocto-tx2-jp43/poky/meta-poky \
  /home/${USER}/yocto-tx2-jp43/poky/meta-yocto-bsp \
  /home/${USER}/yocto-tx2-jp43/meta-tx2-jp43 \
  /home/${USER}/yocto-tx2-jp43/meta-openembedded/meta-oe \ # cmake or gflw seems require this.
  &#34;
</code></pre><h3 id="build-image">Build Image</h3>
<pre tabindex="0"><code>&gt; bitbake  core-image-sato-sdk    # Or core-image-sata-dev, core-image-minimal etc.
</code></pre><h3 id="deploy">Deploy</h3>
<p>Script:</p>
<pre tabindex="0"><code>#!/bin/bash

image=$1
machine=$2

scriptdir=&#34;$( cd &#34;$( dirname &#34;${BASH_SOURCE[0]}&#34; )&#34; &gt;/dev/null &amp;&amp; pwd )&#34;
deployfile=${image}-${machine}.tegraflash.zip
tmpdir=`mktemp`

rm -rf $tmpdir
mkdir -p $tmpdir
echo &#34;Using temp directory $tmpdir&#34;
pushd $tmpdir
cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile .
unzip $deployfile
set -e
sudo ./doflash.sh
popd
echo &#34;Removing temp directory $tmpdir&#34;
rm -rf $tmpdir
</code></pre><pre tabindex="0"><code>sudo ./deploy.sh core-image-sato-sdk jetson-tx2
</code></pre><p>This image should have both real-time patch and RealSense R200 supports.</p>
<pre tabindex="0"><code>root@jetson-tx2:~# uname -a
Linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 SMP PREEMPT RT Thu Jan 28 22:42:33 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux
</code></pre><h2 id="build-rtimulib2">Build RTIMULib2</h2>
<p>My J120 carrier board has a on-board <a href="https://invensense.tdk.com/products/motion-tracking/9-axis/mpu-9250/">9-axis (Gyro, Accelerometer, Compass) MPU-9250</a>. Here we show how the demo app can be compiled and run on the Yocto-linux just flashed.</p>
<h3 id="get-rtimulib2">Get RTIMULIB2</h3>
<p>There&rsquo;s no git installed on the flashed TX2-J120. Let&rsquo;s get the zipped version from <a href="https://github.com/andrasj/RTIMULib2">github:RTIMULib2</a>, then <code>rcp</code> it over to device.</p>
<pre tabindex="0"><code>rcp RTIMULib2-master.zip root@&lt;device ip addr&gt;:/home/root/
</code></pre><h3 id="compile-rtimulib">Compile RTIMULib</h3>
<pre tabindex="0"><code>root@jetson-tx2:~/RTIMULib2-master# cd RTIMULib/
root@jetson-tx2:~/RTIMULib2-master/RTIMULib# ls
CMakeLists.txt	RTFusionKalman4.cpp  RTIMUAccelCal.cpp	RTIMUHal.h	  RTIMULibDefs.h     RTIMUSettings.h
IMUDrivers	RTFusionKalman4.h    RTIMUAccelCal.h	RTIMULIB LICENSE  RTIMUMagCal.cpp    RTMath.cpp
RTFusion.cpp	RTFusionRTQF.cpp     RTIMUCalDefs.h	RTIMULib.h	  RTIMUMagCal.h      RTMath.h
RTFusion.h	RTFusionRTQF.h	     RTIMUHal.cpp	RTIMULib.pri	  RTIMUSettings.cpp  build
root@jetson-tx2:~/RTIMULib2-master/RTIMULib# mkdir build &amp;&amp; cd build
root@jetson-tx2:~/RTIMULib2-master/RTIMULib/build# cmake ..
root@jetson-tx2:~/RTIMULib2-master/RTIMULib/build# make -j
</code></pre><h3 id="compile-application">Compile Application</h3>
<p>Some of the applications need Qt4 library that doesn&rsquo;t exist on the Yocto built we prepared, so we will first comment those off in <!-- raw HTML omitted -->/Linux/CMakeLists.txt:</p>
<pre tabindex="0"><code>OPTION(BUILD_GL &#34;Build RTIMULibGL&#34; OFF)                                                 
OPTION(BUILD_DRIVE &#34;Build RTIMULibDrive&#34; ON)                                            
OPTION(BUILD_DRIVE10 &#34;Build RTIMULibDrive10&#34; ON)                                        
OPTION(BUILD_DRIVE11 &#34;Build RTIMULibDrive11&#34; ON)                                        
OPTION(BUILD_CAL &#34;Build RTIMULibCal&#34; OFF)                                               
OPTION(BUILD_DEMO &#34;Build RTIMULibDemo&#34; OFF)                                             
</code></pre><p>Then compile:</p>
<pre tabindex="0"><code>root@jetson-tx2:~/RTIMULib2-master/Linux/build# pwd
/home/root/RTIMULib2-master/Linux/build
root@jetson-tx2:~/RTIMULib2-master/Linux/build# cmake ..
root@jetson-tx2:~/RTIMULib2-master/Linux/build# make -j
</code></pre><p>On our J120 board (or setting in device tree?), the MPU-9250 is on SPI bus 1 device 0 (spidev1.0). A related <a href="https://forums.developer.nvidia.com/t/running-rtimulib2-on-tx1-with-auvidea-j120-carrier-board/51052">forum disucssion</a> confirmed this as well. So we have to modify RTIMULib.ini configuration before running apps.</p>
<pre tabindex="0"><code># IMU type -                                                           
#   ...
#   7 = InvenSense MPU-9250                               
#   8 = STM L3GD20H + LSM303DLHC                          
#   ...
IMUType=7                       
                                                            
# Is bus I2C: &#39;true&#39; for I2C, &#39;false&#39; for SPI                
BusIsI2C=false                                               
                
# SPI Bus (between 0 and 7)
SPIBus=1                   
                              
# SPI select (between 0 and 1)
SPISelect=0                  
</code></pre><p>Run the app (guess the MPU is not calibrated, so the data are not trust-worthy):</p>
<pre tabindex="0"><code>root@jetson-tx2:~/RTIMULib2-master/Linux/build/RTIMULibDrive11# vi RTIMULib.ini 
root@jetson-tx2:~/RTIMULib2-master/Linux/build/RTIMULibDrive11# sudo ./RTIMULibDrive11 
Settings file RTIMULib.ini loaded
Using fusion algorithm RTQF
Detected MS5611 at standard address
Detected HTU21D at standard address
min/max compass calibration not in use
Ellipsoid compass calibration not in use
Accel calibration not in use
MPU-9250 init complete
Sample rate 0: : roll:179.025433, pitch:-0.544863, yaw:43.259560
Pressure: -334.6, height above sea level:  nan, temperature:  0.0, humidity:  0.0
Sample rate 0: : roll:178.940793, pitch:-0.527068, yaw:43.185848
Pressure: -268.4, height above sea level:  nan, temperature: -46.8, humidity:  0.0
Sample rate 0: : roll:178.934127, pitch:-0.513112, yaw:43.088907
Pressure: -268.4, height above sea level:  nan, temperature: -46.8, humidity: -16.8
Sample rate 0: : roll:178.963428, pitch:-0.509524, yaw:42.994914
Pressure: -268.4, height above sea level:  nan, temperature: -46.8, humidity: -16.8
Sample rate 85: : roll:179.010133, pitch:-0.507106, yaw:42.906466
Pressure: -268.4, height above sea level:  nan, temperature: -46.8, humidity: -16.8
Sample rate 85: : roll:179.057616, pitch:-0.509052, yaw:42.830696
Pressure: -268.4, height above sea level:  nan, temperature: -46.8, humidity: -16.8
...
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Create Kernel Patch for TX2 J120 Carrier Board</title>
      <link>https://jinchenglee.github.io/posts/06272024_create_kernel_patch_for_j120_carrier_board/</link>
      <pubDate>Sat, 29 Jun 2024 21:05:00 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06272024_create_kernel_patch_for_j120_carrier_board/</guid>
      <description><![CDATA[<h2 id="patch-linux-kernel-using-official-firmware">Patch Linux Kernel using Official Firmware</h2>
<p>J120 is a third-party Jetson TX2 carrier board from Auvidea, thus whenever new Jetpack was released there need updated firmware from Auvidea. This section describes how to apply the J120 updated <a href="https://auvidea.eu/firmware/">firmware v3.0</a> released on Feb 2020 (download <a href="https://auvidea.eu/download/firmware/J120/J90-J120-J130_4_3.tar.bz2">link</a>):</p>
<pre tabindex="0"><code>Feb 2020 	J90/J120/J130 (202 MB) 	3.0 

supports: Jetson TX2 only
– JetPack 4.3 (L4T 32.3.1)
– 2x USB 3.0
– IMU MPU9250 (spidev1.0)
– 1x GbE
– 1x M.2 NVME PCIe x4
– port mapping: config 2 (default)
</code></pre><p>Unzip the downloaded file shows two tar&rsquo;ed packages: kernel_out and kernel_src. The former is already-built binaries in the relase; the latter contains the corresponding modified linux kernel source files that the former binaries were generated.</p>
<p>The steps to apply the patches are listed in file How_to_flash_TX2_with_nvidia_sdkmanager.txt as below. It uses the released patched binaries only.</p>
<pre tabindex="0"><code>How to install the auvidea kernel the nvidia sdkmanager
####################################################################################
This manual is written for the Jetson TX2


1. prepare the sdk
ONLY NEEDED IF NO TX2 WAS FLASHED BEFORE
-start the sdkmanager
-select the Jetson TX2(P3310) as target Hardware
-select Jetpack 4.3 as target operating system
-start the installation until the sdk asks you for either use automatic or manual setup
 -&gt; at this point you can choose to &#34;skip&#34; the rest of the installation and continue with step 2 of this instructions

2. copy the contents of the kernel_out folder in the auvidea packet to the nvida_sdk folder
-&gt; cp ~/kernel_out/* /home/USER/nvidia/nvidia_sdk/JetPack_4.3_Linux_P3310/
 
3. switch in the TX2 folder and apply binaries 
-&gt; cd /home/USER/nvidia/nvidia_sdk/JetPack_4.3_Linux_P3310/Linux_for_Tegra/
-&gt; sudo ./apply_binaries.sh

4. start the sdkmanger and follow the normal installation process



You can also use the flowing commands to flash the TX2 after Step 3:

cd /home/USER/nvidia/nvidia_sdk/JetPack_4.3_Linux_P3310/Linux_for_Tegra/
</code></pre><h2 id="verify-modified-kernel-source-files">Verify modified kernel source files</h2>
<h3 id="download-correct-version">Download correct version</h3>
<pre tabindex="0"><code>./source_sync.sh -k tegra-l4t-r32.3.1
</code></pre><h3 id="create-a-special-patch-file">Create a special patch file</h3>
<p>Let&rsquo;s call original unchanged kernel source directory <code>target_directory</code>, the directory contains patched sources <code>source_directory</code>.</p>
<p>The condition is a bit complex:</p>
<ol>
<li>There exist files in <code>target_directory</code> that don&rsquo;t need to be modified and these files don&rsquo;t exist in <code>source directory</code>;</li>
<li>There might exist new files/directories in <code>source directory</code> that don&rsquo;t exist in <code>target directory</code></li>
</ol>
<p>A simple <code>diff</code> to generate patch file is not possible.</p>
<p>A script <code>generate_patch.sh</code> is created for the purpose:</p>
<pre tabindex="0"><code>#!/bin/bash

# Check if both arguments are provided
if [ &#34;$#&#34; -ne 2 ]; then
    echo &#34;Usage: $0 &lt;source_directory&gt; &lt;target_directory&gt;&#34;
    exit 1
fi

SOURCE_DIR=&#34;$1&#34;
TARGET_DIR=&#34;$2&#34;

# Function to generate diff for a file
generate_file_diff() {
    local file=&#34;$1&#34;
    local rel_path=&#34;${file#$SOURCE_DIR/}&#34;
    if [ -f &#34;$TARGET_DIR/$rel_path&#34; ]; then
        diff -uN &#34;$TARGET_DIR/$rel_path&#34; &#34;$file&#34;
    else
        diff -uN /dev/null &#34;$file&#34;
    fi
}

# Function to process a directory
process_directory() {
    local dir=&#34;$1&#34;
    local rel_dir=&#34;${dir#$SOURCE_DIR/}&#34;

    # Create directory entry if it doesn&#39;t exist in target
    if [ ! -d &#34;$TARGET_DIR/$rel_dir&#34; ] &amp;&amp; [ &#34;$rel_dir&#34; != &#34;&#34; ]; then
        echo &#34;diff -uN $TARGET_DIR/$rel_dir $SOURCE_DIR/$rel_dir&#34;
        echo &#34;--- $TARGET_DIR/$rel_dir&#34;
        echo &#34;+++ $SOURCE_DIR/$rel_dir&#34;
        echo &#34;@@ -0,0 +1 @@&#34;
        echo &#34;+$rel_dir/&#34;
    fi

    # Process files in this directory
    find &#34;$dir&#34; -maxdepth 1 -type f | while read -r file; do
        generate_file_diff &#34;$file&#34;
    done

    # Recursively process subdirectories
    find &#34;$dir&#34; -mindepth 1 -maxdepth 1 -type d | while read -r subdir; do
        process_directory &#34;$subdir&#34;
    done
}

# Start processing from the root of the source directory
process_directory &#34;$SOURCE_DIR&#34; &gt; update.patch
</code></pre><p>Run this script to generate <code>update.patch</code> file:</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/tx2-j120/J90-J120-J130_4_3/kernel_src$ pwd
/home/xxx/tx2-j120/J90-J120-J130_4_3/kernel_src    &lt;= This dir is from Auvidea firmware v3.0
xxx@ubuntu18:~/tx2-j120/J90-J120-J130_4_3/kernel_src$ bash ../generate_patch.sh . ~/tx2_source_build/r32-3-1_Release_v1.0/sources
</code></pre><h3 id="apply-the-patch-file">Apply the patch file</h3>
<p>We need another special script <code>apply_patch.sh</code> because we need first create those non-exist new directories in <code>target directory</code> first:</p>
<pre tabindex="0"><code>#!/bin/bash

PATCH_FILE=&#34;update.patch&#34;

# Check if both arguments are provided
if [ &#34;$#&#34; -ne 1 ]; then
    echo &#34;Usage: $0 &lt;target_directory&gt;&#34;
    exit 1
fi

TARGET_DIR=&#34;$1&#34;



# Extract directory creations
grep -E &#34;^\+[^+]\S+\w\/$&#34; &#34;$PATCH_FILE&#34; | sed &#39;s/^+//&#39; | grep &#34;/$&#34; &gt; directories.txt

# Create directories
while read -r dir; do
    mkdir -p &#34;$TARGET_DIR/$dir&#34;
done &lt; directories.txt

# Remove directory creation diffs from the patch file
sed -i &#39;/^diff.*\/$/d; /^---.*\/$/d; /^+++.*\/$/d; /^@@ -0,0 +1 @@$/d; /^\+[^+]\S+\w\/$/d&#39; &#34;$PATCH_FILE&#34;

# Apply the modified patch
patch -p1 -N -d &#34;$TARGET_DIR&#34; &lt; &#34;$PATCH_FILE&#34;
</code></pre><p>Then apply the patch:</p>
<pre tabindex="0"><code>bash ../apply_patch.sh ~/tx2_source_build/r32-3-1_Release_v1.0/sources
</code></pre><h3 id="compile-the-kernel-and-verify">Compile the kernel and verify</h3>
<p>Skip here the manual process.</p>
<h2 id="create-patch-from-modified-kernel-source-files">Create patch from modified kernel source files</h2>
<p>After we&rsquo;ve verified the source file changes, we can leverage Yocto <code>devtool</code> to generate the patch file. How to get the Linux kernel sources and use <code>devtool</code> can be found in previous blogs. Skipping here. The key part is to get the source files patched using the two special scripts (<code>generate_patch.sh</code> and <code>apply_patch.sh</code> in last section of this blog article.</p>
<p>The patch is recorded in <a href="https://github.com/jinchenglee/meta-tx2-jp43/commit/e30ec5e1c176861238add59cd4ead200e6f99043">this commit</a> into branch <code>dev/tx2-j120-jp43</code> of <a href="https://github.com/jinchenglee/meta-tx2-jp43">meta-tx2-jp43</a>. The key patch is <a href="https://github.com/jinchenglee/meta-tx2-jp43/blob/dev/tx2-j120-jp43/recipes-kernel/linux/linux-tegra/0003-Linux-kernel-patch-for-TX2-on-J120-carrier-board-wit.patch">0003-Linux-kernel-patch-for-TX2-on-J120-carrier-board-wit.patch</a>.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Yocto kernel patch L4T R32.3.1 on tx2</title>
      <link>https://jinchenglee.github.io/posts/06132024_yocto_patch_l4t.r32.3.1_tx2/</link>
      <pubDate>Thu, 13 Jun 2024 21:42:50 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06132024_yocto_patch_l4t.r32.3.1_tx2/</guid>
      <description><![CDATA[<h2 id="patch-to-fix--sdk-build-failures">Patch to fix <code>*-sdk</code> build failures</h2>
<p>When a unmodified yocto build environment is setup (see previous blog about Yocto on TX2, &ldquo;default meta-tegra build&rdquo;), trying to build <code>*-sdk</code> (e.g. <code>core-image-sato-sdk</code>) will fail although <code>*-dev</code> builds are fine.</p>
<h3 id="compilation-srclinec">compilation: srcline.c</h3>
<p>The failure is related to <code>perf-1.0</code> tool that Linux kernel requires. This first error comes from kernel compilation of <code>tools/perf/util/srcline.c</code>.</p>
<pre tabindex="0"><code>/build/tmp/work/intel_core2_32-poky-linux/perf/1.0-r9/perf-1.0/perf-in.o: in function `find_address_in_section&#39;:
/usr/src/debug/perf/1.0-r9/perf-1.0/tools/perf/util/srcline.c:200: undefined reference to `bfd_get_section_flags&#39;
</code></pre><p>A search online <a href="https://lists.yoctoproject.org/g/meta-intel/topic/patch_2_2_linux_intel/71501209">result</a> shows hint how to fix the source code.</p>
<h3 id="installation-setuppy">installation: setup.py</h3>
<p>Then the failure comes from (it seems) <code>PREFERRED_VERSION_python3 = &quot;3.8%&quot;</code> vs. <code>tools/perf/util/setup.py</code> of <code>perf-1.0</code> expects python2.x. After searching around, I ended up using <a href="https://docs.python.org/3/library/2to3.html">2to3 - Automated Python 2 to 3 code translation</a> to have converted the setup.py which resulted the error.</p>
<h3 id="installation-pythonc">installation: python.c</h3>
<p>The installation phase of <code>perf-1.0</code> hit yet another failure, which seems trying to expose the built perf library to python, but again, it expects python 2.x. The error is related to Python C-API changes on PyObject_HEAD macro used in <code>tools/perf/util/python.c</code>. Several lines need to be changes similarly as below:</p>
<pre tabindex="0"><code>@@ -513,7 +513,9 @@ static int pyrf_cpu_map__init(struct pyrf_cpu_map *pcpus,
 static void pyrf_cpu_map__delete(struct pyrf_cpu_map *pcpus)
 {
        cpu_map__put(pcpus-&gt;cpus);
-       pcpus-&gt;ob_type-&gt;tp_free((PyObject*)pcpus);
+       // Python2 vs. 3 incompatibility
+       //pcpus-&gt;ob_type-&gt;tp_free((PyObject*)pcpus);
+       Py_TYPE(pcpus)-&gt;tp_free((PyObject*)pcpus);
 }
</code></pre><h3 id="using-devtool-to-patch-the-kernel">Using devtool to Patch the Kernel</h3>
<p>Yocto provided easty-to-follow <a href="https://docs.yoctoproject.org/kernel-dev/common.html#using-devtool-to-patch-the-kernel">procedure</a> to patch the kernel by using the devtool tool. It will fetch/sync the specifric kernel version to a local workspace. After local modification/try build/verification, it will package the changes as a recipe automatically. Really convenient.</p>
<p>Notice: unlike what mentioned in the yocto document <code>linux-yocto</code>, for our target tx2, we should replace that with <code>linux-tegra</code>.</p>
<p>The auto-prepared recipe looks like this:</p>
<pre tabindex="0"><code>./meta-example/
├── conf
│   └── layer.conf
├── COPYING.MIT
├── README
└── recipes-kernel
    └── linux
        ├── linux-tegra
        │   └── 0001-Workaround-build-installation-issues-related-to-perf.patch
        └── linux-tegra_4.9.bbappend
</code></pre><h3 id="rebuild-and-flash">Rebuild and flash</h3>
<p>Rebuild the image shows suceess.</p>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tegra/build$ bitbake core-image-sato-sdk 
Parsing recipes: 100% |#################################################################################################| Time: 0:00:12
Parsing of 875 .bb files complete (0 cached, 875 parsed). 1486 targets, 76 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;ubuntu-18.04&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;
meta-example        = &#34;&lt;unknown&gt;:&lt;unknown&gt;&#34;

Initialising tasks: 100% |##############################################################################################| Time: 0:00:04
Sstate summary: Wanted 3202 Found 3158 Missed 44 Current 0 (98% match, 0% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 7674 tasks of which 7013 didn&#39;t need to be rerun and all succeeded.
</code></pre><p>Flash with command <code>sudo ./deploy.sh core-image-sato-sdk  jetson-tx2</code>.</p>
<h2 id="post-flash-apt-get-sourceslist-and-cyclictest">Post-flash: Apt-get sources.list and Cyclictest</h2>
<p>Some post-flash actions on the TX2 device to prepare some comparison vs. a later PREEMPT-RT patched kernel. Will need <code>rt-tests</code> tool cyclictest on the device.</p>
<ul>
<li>Set up apt-get sources.list</li>
</ul>
<p>Our built image comes with apt-get because we&rsquo;ve set added these to build/conf/local.conf (maybe only the package_deb is necessary for that):</p>
<pre tabindex="0"><code>MACHINE = &#34;jetson-tx2&#34;
MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += &#34;kernel-modules&#34;

DL_DIR ?= &#34;/home/${USER}/Yocto/downloads&#34;
SSTATE_DIR ?= &#34;/home/${USER}/Yocto/sstate_dir&#34;

PACKAGE_CLASSES ?= &#34;package_deb&#34;

EXTRA_IMAGE_FEATURES ?= &#34;debug-tweaks tools-sdk package-management&#34;
IMAGE_CLASSES += &#34;image_types_tegra&#34;

PREFERRED_VERSION_python3 = &#34;3.8%&#34;
PREFERRED_VERSION_python3-native = &#34;3.8%&#34;

BB_NUMBER_THREADS = &#39;11&#39;
PARALLEL_MAKE = &#39;-j11&#39;
</code></pre><p>After tx2 bootstrapped, set this to <a href="https://gist.github.com/josephlr/5034c933bbcfddc25a9275037821b048">/etc/apt/sources.list</a>:</p>
<pre tabindex="0"><code>deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse
deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse
deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse
deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse

deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic main restricted universe multiverse
deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main restricted universe multiverse
deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-backports main restricted universe multiverse
deb [arch=arm64,armhf,ppc64el,s390x] http://ports.ubuntu.com/ubuntu-ports/ bionic-security main restricted universe multiverse
</code></pre><ul>
<li>Install rt-tests</li>
</ul>
<p>Then do <code>apt-get update</code>, then install rt-tests:</p>
<pre tabindex="0"><code>apt-get install rt-tests
</code></pre><p>It complains about below, which might be resolved by <code>dpkg -i --force-overwrite &lt;filename&gt;.deb</code> to force overwrite, but I don&rsquo;t bother to do that, since , but it seems <code>cyclictest</code> has been installed successfully.</p>
<pre tabindex="0"><code>Preparing to unpack .../xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb ...
Unpacking xz-utils (5.2.2-1.3ubuntu0.1) ...
dpkg: error processing archive /var/cache/apt/archives/xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb (--unpack):
 trying to overwrite &#39;/usr/bin/lzmainfo&#39;, which is also in package xz 5.2.4-r0
dpkg-deb: error: paste subprocess was killed by signal (Broken pipe)
Selecting previously unselected package rt-tests.
Preparing to unpack .../rt-tests_1.0-3_arm64.deb ...
Unpacking rt-tests (1.0-3) ...
Errors were encountered while processing:
 /var/cache/apt/archives/xz-utils_5.2.2-1.3ubuntu0.1_arm64.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre><ul>
<li>run cyclictest</li>
</ul>
<pre tabindex="0"><code>root@jetson-tx2:~# uname -a
Linux jetson-tx2 4.9.140-l4t-r32.3.1+ga0004d2ad6a4 #1 SMP PREEMPT ... aarch64 aarch64 aarch64 GNU/Linux

root@jetson-tx2:~#  cyclictest -t 5 -p 80 -n
# /dev/cpu_dma_latency set to 0us
policy: fifo: loadavg: 0.06 0.08 0.08 1/222 3921          

T: 0 ( 3913) P:80 I:1000 C: 297462 Min:      7 Act:   29 Avg:   31 Max:     334
T: 1 ( 3914) P:80 I:1500 C: 198308 Min:      6 Act:   28 Avg:   29 Max:     230
T: 2 ( 3915) P:80 I:2000 C: 148731 Min:      8 Act:   23 Avg:   31 Max:     288
T: 3 ( 3916) P:80 I:2500 C: 118985 Min:      6 Act:   43 Avg:   29 Max:     234
T: 4 ( 3917) P:80 I:3000 C:  99154 Min:      6 Act:   23 Avg:   30 Max:     201
</code></pre><h2 id="patch-preempt-rt">Patch PREEMPT-RT</h2>
<p>These links are referred to as doing the patch:</p>
<ul>
<li>meta-tegra: [Applying PREEMPT RT Patches dunfell l4t r32.4.3](Applying PREEMPT RT Patches dunfell l4t r32.4.3)</li>
<li>NVidia forum: <a href="https://forums.developer.nvidia.com/t/preempt-rt-patches-for-jetson-nano/72941">PREEMPT-RT patches for Jetson Nano</a></li>
</ul>
<p>Recorded steps:</p>
<pre tabindex="0"><code>pwd: ~/yocto-tx2-jp43-rt/build
bitbake-layers create-layer ../meta-tx2-jp43
bitbake-layers add-layer ../meta-tx2-jp43
devtool modify linux-tegra

pwd: ~/yocto-tx2-jp43-rt/build/workspace/sources/linux-tegra/scripts
./rt-patch.sh apply-patches

pwd: ~/yocto-tx2-jp43-rt/build
devtool menuconfig linux-tegra
</code></pre><p>Configure these:</p>
<pre tabindex="0"><code>General setup -&gt; Timer subsystem -&gt; Timer tick handling -&gt; Full dynticks system (tickless)
Kernel Features -&gt; Preemption  Model: Fully Preemptible Kernel (RT)
Optional: Kernel Features -&gt; Timer frequency: 1000 HZ (default is 250Hz)
</code></pre><p>The changes in menuconfig is logged in file <code>~/yocto-tx2-jp43-rt/build/workspace/sources/linux-tegra/oe-local-files/devtool-fragment.cfg</code>:</p>
<pre tabindex="0"><code># CONFIG_NO_HZ_IDLE is not set
CONFIG_NO_HZ_FULL=y
# CONFIG_NO_HZ_FULL_ALL is not set
# CONFIG_NO_HZ_FULL_SYSIDLE is not set
CONFIG_VIRT_CPU_ACCOUNTING=y
# CONFIG_TICK_CPU_ACCOUNTING is not set
CONFIG_VIRT_CPU_ACCOUNTING_GEN=y
CONFIG_PREEMPT_RCU=y
CONFIG_CONTEXT_TRACKING=y
# CONFIG_CONTEXT_TRACKING_FORCE is not set
CONFIG_RCU_NOCB_CPU=y
CONFIG_RCU_NOCB_CPU_NONE=y
# CONFIG_RCU_NOCB_CPU_ZERO is not set
# CONFIG_RCU_NOCB_CPU_ALL is not set
CONFIG_PREEMPT=y
CONFIG_PREEMPT_RT_BASE=y
CONFIG_PREEMPT_LAZY=y
# CONFIG_PREEMPT_NONE is not set
CONFIG_PREEMPT_RT_FULL=y
CONFIG_PREEMPT_COUNT=y
# CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS is not set
CONFIG_DEBUG_PREEMPT=y
# CONFIG_PREEMPT_TRACER is not set
</code></pre><p>Continue building kernel and image:</p>
<pre tabindex="0"><code>devtool build linux-tegra
devtool build-image core-image-sato-dev
</code></pre><h2 id="combine-both-patches">Combine both patches</h2>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tx2-jp43-rt$ tree ./meta-tx2-jp43/
./meta-tx2-jp43/
├── conf
│   └── layer.conf
├── COPYING.MIT
├── README
└── recipes-kernel
    └── linux
        ├── linux-tegra
        │   ├── 0001-Apply-PREEMPT-RT-patch-to-patches-l4t-r32.3.1-on-lin.patch
        │   ├── 0002-Workaround-build-installation-issues-related-to-perf.patch
        │   └── devtool-fragment.cfg
        └── linux-tegra_%.bbappend

@ubuntu18:~/yocto-tx2-jp43-rt$ cat meta-tx2-jp43/recipes-kernel/linux/linux-tegra_%.bbappend 
FILESEXTRAPATHS_prepend := &#34;${THISDIR}/${PN}:&#34;

SRC_URI += &#34;file://devtool-fragment.cfg file://0001-Apply-PREEMPT-RT-patch-to-patches-l4t-r32.3.1-on-lin.patch&#34;
SRC_URI += &#34;file://0002-Workaround-build-installation-issues-related-to-perf.patch&#34;

@ubuntu18:~/yocto-tx2-jp43-rt/build$ bitbake core-image-sato-sdk
</code></pre><p>Run cyclictest (can compare with the run w/o RT patch):</p>
<pre tabindex="0"><code>root@jetson-tx2:~# uname -a
Linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 SMP PREEMPT RT ... aarch64 aarch64 aarch64 GNU/Linux

root@jetson-tx2:~#  cyclictest -t 5 -p 80 -n
# /dev/cpu_dma_latency set to 0us
policy: fifo: loadavg: 0.17 0.25 0.18 2/306 3979          

T: 0 ( 3971) P:80 I:1000 C: 279669 Min:      7 Act:   31 Avg:   29 Max:     127
T: 1 ( 3972) P:80 I:1500 C: 186446 Min:      7 Act:   29 Avg:   30 Max:     139
T: 2 ( 3973) P:80 I:2000 C: 139834 Min:      8 Act:   24 Avg:   31 Max:     146
T: 3 ( 3974) P:80 I:2500 C: 111867 Min:      8 Act:   29 Avg:   31 Max:     117
T: 4 ( 3975) P:80 I:3000 C:  93223 Min:      7 Act:   28 Avg:   30 Max:     110
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Yocto on TX2 with Jetpack4.3</title>
      <link>https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/</link>
      <pubDate>Mon, 10 Jun 2024 17:08:34 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/</guid>
      <description><![CDATA[<p>#Yocto on TX2 with Jetpack4.3</p>
<p>This blog tries to build TX2 image with industry-default flow for embedded system &ndash; the Yocto project, for ancient Jetson TX2 with Jetpack 4.3 (L4T R32.3.1).</p>
<h2 id="default-meta-tegra-build">Default meta-tegra build</h2>
<ul>
<li>Sync down meta-tegra with right branch <a href="https://github.com/OE4T/meta-tegra/tree/dunfell-l4t-r32.3.1"><code>dunfell-l4t-r32.3.1</code></a>. Also, please check <a href="https://github.com/OE4T/meta-tegra/wiki/L4T-R32.3.1-Notes">L4T R32.3.1 Notes</a>.</li>
</ul>
<pre tabindex="0"><code>cd ~ &amp;&amp; mkdir yocto-tx2-jp43 &amp;&amp; cd yocto-tx2-jp43
git clone https://github.com/OE4T/meta-tegra.git 
cd meta-tegra
git branch -a
git checkout dunfell-l4t-r32.3.1
</code></pre><ul>
<li>Sync down poky with right branch <code>dunfell</code>.</li>
</ul>
<pre tabindex="0"><code>cd ~/yocto-tx2-jp32
git clone https://github.com/yoctoproject/poky.git
cd poky
git branch -a
git checkout dunfell
</code></pre><ul>
<li>Active environment</li>
</ul>
<pre tabindex="0"><code>source poky/oe-init-build-env
</code></pre><ul>
<li>Add configurations to build/conf/local.conf</li>
</ul>
<pre tabindex="0"><code>MACHINE ??= &#34;jetson-tx2&#34;

DL_DIR ?= &#34;/home/${USER}/Yocto/downloads&#34;

SSTATE_DIR ?= &#34;/home/${USER}/Yocto/sstate_dir&#34;

IMAGE_CLASSES += &#34;image_types_tegra&#34;

PREFERRED_VERSION_python3 = &#34;3.8%&#34;
PREFERRED_VERSION_python3-native = &#34;3.8%&#34;

BB_NUMBER_THREADS = &#39;11&#39;
PARALLEL_MAKE = &#39;-j11&#39;
</code></pre><ul>
<li>Add configuration to build/conf/bblayers.conf</li>
</ul>
<pre tabindex="0"><code>/home/${USER}/yocto-tegra/meta-tegra \
</code></pre><p>The bblayers.conf looks like:</p>
<pre tabindex="0"><code>#// POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
#// changes incompatibly
POKY_BBLAYERS_CONF_VERSION = &#34;2&#34;

BBPATH = &#34;${TOPDIR}&#34;
BBFILES ?= &#34;&#34;

BBLAYERS ?= &#34; \
  /home/${USER}/yocto-tegra/meta-tegra \
  /home/${USER}/yocto-tx2-jp43/poky/meta \
  /home/${USER}/yocto-tx2-jp43/poky/meta-poky \
  /home/${USER}/yocto-tx2-jp43/poky/meta-yocto-bsp \
  &#34;
</code></pre><h3 id="build-core-image-minimal">Build core-image-minimal.</h3>
<pre tabindex="0"><code>bitbake core-image-minimal
</code></pre><p>Successful completion of the built shows sth. like below. I&rsquo;m running on a previously built cache, so a lot of tasks don&rsquo;t need re-run. If you are running from scratch, this process can take pretty long depending on your host machine (~hours).</p>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal
Loading cache: 100% |#####################################################################################################| Time: 0:00:00
Loaded 1486 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;ubuntu-18.04&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;

Initialising tasks: 100% |################################################################################################| Time: 0:00:01
Sstate summary: Wanted 1203 Found 1199 Missed 4 Current 0 (99% match, 0% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 3200 tasks of which 2952 didn&#39;t need to be rerun and all succeeded.
</code></pre><ul>
<li>Deploy</li>
</ul>
<p>Using this script:</p>
<pre tabindex="0"><code>#!/bin/bash

image=$1
machine=$2

scriptdir=&#34;$( cd &#34;$( dirname &#34;${BASH_SOURCE[0]}&#34; )&#34; &gt;/dev/null &amp;&amp; pwd )&#34;
deployfile=${image}-${machine}.tegraflash.zip
tmpdir=`mktemp`

rm -rf $tmpdir
mkdir -p $tmpdir
echo &#34;Using temp directory $tmpdir&#34;
pushd $tmpdir
cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile .
unzip $deployfile
set -e
sudo ./doflash.sh
popd
echo &#34;Removing temp directory $tmpdir&#34;
rm -rf $tmpdir
</code></pre><p>Put Jetson TX2 development kit into force recovery mode by:</p>
<ol>
<li>Press down REC button and not release</li>
<li>Press down POWER button and release</li>
<li>Release REC button</li>
</ol>
<p>To make sure the board has entered recoverage mode, check lsusb on host:</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tegra$ lsusb
...
Bus 003 Device 013: ID 0955:7c18 NVidia Corp.                  &lt;= Check this line. 
...
</code></pre><p>Run the deploy command:</p>
<pre tabindex="0"><code>:~/yocto-tx2-jp43$ sudo ./deploy.sh core-image-minimal jetson-tx2
</code></pre><p>On the debug serial port or the connected monitor to TX2, you should see this:</p>
<pre tabindex="0"><code>Poky (Yocto Project Reference Distro) 3.1.33 jetson-tx2 /dev/ttyXXX

jetson-tx2 login:
</code></pre><p>Using <code>root</code> without password should login you in.</p>
<h3 id="build-core-image-sato-dev">Build core-image-sato-dev</h3>
<p>Similarly, we can build an image with GUI from yocto:</p>
<pre tabindex="0"><code>bitbake core-image-sato-dev
</code></pre><p>Using the same deploy.sh script to flash:</p>
<pre tabindex="0"><code>sudo ./deploy.sh core-image-sato-dev jetson-tx2
</code></pre><h2 id="patch-kernel-with-preempt-rt">Patch kernel with PREEMPT-RT</h2>
<p>PREEMPT-RT patches are for real-time applications on Linux. The patching process described below refers to these links:</p>
<ol>
<li><a href="https://forums.developer.nvidia.com/t/preempt-rt-patches-for-jetson-nano/72941">PREEMPT-RT patches for Jetson Nano</a></li>
<li><a href="https://github.com/OE4T/meta-tegra/wiki/Applying-PREEMPT-RT-Patches-dunfell-l4t-r32.4.3">Applying PREEMPT RT Patches dunfell l4t r32.4.3</a></li>
</ol>
<h3 id="getting-ready-for-kernel-dev-using-devtool-according-to-yocto-doc9httpsdocsyoctoprojectorgkernel-devcommonhtmlgetting-ready-to-develop-using-devtool">Getting Ready for kernel-dev Using devtool according to <a href="9https://docs.yoctoproject.org/kernel-dev/common.html#getting-ready-to-develop-using-devtool">Yocto Doc</a>.</h3>
<p>Update local.conf file:</p>
<pre tabindex="0"><code>MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += &#34;kernel-modules&#34;
</code></pre><ul>
<li>Create a layer for patches and inform BitBake build env about the newly added layer:</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43$ cd build/
xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers create-layer ../meta-tx2-jp43
NOTE: Starting bitbake server...
Add your new layer with &#39;bitbake-layers add-layer ../meta-tx2-jp43&#39;

xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers add-layer ../meta-tx2-jp43/
NOTE: Starting bitbake server...
</code></pre><p>The last commad will add the newly added layer to your build/conf/bblayers.conf</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ cat conf/bblayers.conf 
#// POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
#// changes incompatibly
POKY_BBLAYERS_CONF_VERSION = &#34;2&#34;

BBPATH = &#34;${TOPDIR}&#34;
BBFILES ?= &#34;&#34;

BBLAYERS ?= &#34; \
  /home/${USER}/yocto-tegra/meta-tegra \
  /home/${USER}/yocto-tx2-jp43/poky/meta \
  /home/${USER}/yocto-tx2-jp43/poky/meta-poky \
  /home/${USER}/yocto-tx2-jp43/poky/meta-yocto-bsp \
  /home/&lt;your user name&gt;/yocto-tx2-jp43/meta-tx2-jp43 \
  &#34;
</code></pre><ul>
<li>Bitbake core-image-minimal to make sure everything is ok.</li>
</ul>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal
Parsing recipes: 100% |###################################################################################################| Time: 0:00:12
Parsing of 876 .bb files complete (0 cached, 876 parsed). 1487 targets, 74 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;universal&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;
meta-tx2-jp43        = &#34;&lt;unknown&gt;:&lt;unknown&gt;&#34;         &lt;= NOTICE the blank &#34;UNKNOWN&#34; here!

Initialising tasks: 100% |################################################################################################| Time: 0:00:01
Sstate summary: Wanted 367 Found 359 Missed 8 Current 836 (97% match, 99% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 3200 tasks of which 3186 didn&#39;t need to be rerun and all succeeded.
</code></pre><h3 id="using-devtool-to-patch-the-kernel">Using devtool to Patch the Kernel</h3>
<p>According to <a href="https://docs.yoctoproject.org/kernel-dev/common.html#using-devtool-to-patch-the-kernel">Yocto Doc</a>.</p>
<ul>
<li>Check out kernel source files.</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool modify linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
Loading cache: 100% |#####################################################################################################| Time: 0:00:00
Loaded 1487 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;universal&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;
meta-tx2-jp43        
workspace            = &#34;&lt;unknown&gt;:&lt;unknown&gt;&#34;

Initialising tasks: 100% |################################################################################################| Time: 0:00:00
Sstate summary: Wanted 55 Found 54 Missed 1 Current 50 (98% match, 99% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 474 tasks of which 463 didn&#39;t need to be rerun and all succeeded.
INFO: Adding local source files to srctree...
INFO: Copying kernel config to srctree
INFO: Source tree extracted to /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
INFO: Recipe linux-tegra now set up to build from /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
</code></pre><ul>
<li>Patch the kernel source and build the kernel:</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build/workspace/sources/linux-tegra$ ./scripts/rt-patch.sh apply-patches
PREEMPT RT patches successfully applied for Auto!
PREEMPT RT patches successfully applied for L4T!
</code></pre><p>Using git status can see a bunch of files are modified and another bunch are added. However, when trying to build kernel exposes build errors:</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
...
NOTE: Executing Tasks
NOTE: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
ERROR: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: oe_runmake failed
ERROR: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: Execution of &#39;/home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/run.do_compile_kernelmodules.17505&#39; failed with exit code 1
ERROR: Logfile of failure stored in: /home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/log.do_compile_kernelmodules.17505

(Details:)
...
/home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c:1606:23: error: passing argument 1 of &#39;waitqueue_active&#39; from incompatible pointer type [-Werror=incompatible-pointer-types]
 1606 |  if (waitqueue_active(&amp;_pno_state-&gt;get_batch_done.wait))
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                       |
      |                       struct swait_queue_head *
...

$ vim ~/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c
1600 #if IS_ENABLED(CONFIG_PREEMPT_RT_FULL)
1601         if (swait_active(&amp;_pno_state-&gt;get_batch_done.wait))
1602 #else
1603 #if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(4, 14, 57)
1604         if (waitqueue_active((struct wait_queue_head *)&amp;_pno_state-&gt;get_batch_done.wait))
1605 #else
1606         if (waitqueue_active(&amp;_pno_state-&gt;get_batch_done.wait))     &lt;= ERROR HERE!
1607 #endif
1608 #endif
</code></pre><ul>
<li>Modify kernel configuration</li>
</ul>
<p>Google around shows the error could be avoided if <code>CONFIG_PREEMPT_RT_FULL</code> is defined in .config before kernel compilation. (BTW, there is another fix option <a href="https://github.com/rockchip-linux/kernel/issues/261#issuecomment-1003837100">here</a> but I don&rsquo;t try this way.)</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake -c menuconfig virtual/kernel
</code></pre><p>Select &ldquo;Kernel features -&gt; Preemption Model (&hellip;)&rdquo; and select &ldquo;Fully Preemptible Kernel (RT)&rdquo;.</p>
<ul>
<li>Save the modified kernel configuration</li>
</ul>
<pre tabindex="0"><code>$ bitbake -c savedefconfig virtual/kernel
$ cp ./tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/linux-tegra-4.9.140+git999/defconfig ./workspace/sources/linux-tegra/arch/arm64/configs/defconfig
</code></pre><p>Now compile again, it should finish successfully.</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
...
WARNING: /home/xxx/yocto-tegra/meta-tegra/recipes-kernel/linux/linux-tegra_4.9.bb:do_compile is tainted from a forced run ETA:  0:00:00
Initialising tasks: 100% |################################################################################################| Time: 0:00:02
Sstate summary: Wanted 324 Found 322 Missed 2 Current 698 (99% match, 99% complete)
NOTE: Executing Tasks
NOTE: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
NOTE: Tasks Summary: Attempted 2648 tasks of which 2627 didn&#39;t need to be rerun and all succeeded.

Summary: There was 1 WARNING message shown.
</code></pre><ul>
<li>Create the image with modified kernel</li>
</ul>
<pre tabindex="0"><code>$ devtool build-image core-image-sato-dev
</code></pre><p>Flash the TX2 and you can see the patched kernel bootstrap successfully.</p>
<pre tabindex="0"><code>root@jetson-tx2:~# uname -a
Linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 SMP PREEMPT RT Mon Jun 10 18:20:28 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux
</code></pre><h3 id="save-the-patch-work-for-future-use">Save the patch work for future use</h3>
<ul>
<li>Stage and commit local changes to the kernel</li>
</ul>
<pre tabindex="0"><code>$ cd workspace/sources/linux-tegra

-- Commit everything (new and modifed) ---
commit 9d4a27452b73870aa07a13883818284c310331e3 (HEAD -&gt; patches-l4t-r32.3.1)
Author: OpenEmbedded &lt;oe.patch@oe&gt;
Date:   Mon Jun 10 12:38:42 2024 -0700

    My patch for Jetson TX2 with Jetpack 4.3/L4T R32.3.1 and PREEMPT-RT.

-- Save a copy of defconfig and localversion_auto.cfg to DL_DIR (defined in local.conf).
$ cp defconfig ~/Yocto/downloads/
$ cp localversion_auto.cfg ~/Yocto/downloads/

-- Export the changes in the commit as patches and create a .bbappend file in layer specificed (meta-tx2-jp43): 
$ devtool finish linux-tegra ../meta-tx2-jp43

$:~/yocto-tx2-jp43$ tree meta-tx2-jp43
meta-tx2-jp43
├── conf
│   └── layer.conf
├── COPYING.MIT
├── README
...
└── recipes-kernel
    └── linux
        ├── linux-tegra-4.9
        │   ├── 0001-My-patch-for-Jetson-TX2-with-Jetpack-4.3-L4T-R32.3.1.patch
        │   └── devtool-fragment.cfg
        └── linux-tegra_4.9.bb
</code></pre><ul>
<li>Create a repository for the layer
Created the layer on github <a href="https://github.com/jinchenglee/meta-tx2-jp43">repo</a>.</li>
</ul>
<h2 id="yocto-build-with-rt-patch-from-scratch">Yocto build with RT patch from scratch</h2>
<p>Now we can use Yocto and our customized layer to build RT-patched Linux from scratch for Jetson TX2 with Jetpack 4.3 and L4T R32.3.1.</p>
<pre tabindex="0"><code>git clone https://github.com/OE4T/meta-tegra.git 
cd meta-tegra &amp;&amp; git checkout dunfell-l4t-r32.3.1 &amp;&amp; cd ..

git clone https://github.com/yoctoproject/poky.git
cd poky &amp;&amp; git checkout dunfell &amp;&amp; cd ..

git clone https://github.com/jinchenglee/meta-tx2-jp43

source poky/oe-init-build-env

#// Make necessary changes to build/conf/local.conf and build/conf/bblayers.conf
#// For example, add below to local.conf:
#//
#//EXTRA_IMAGE_FEATURES ?= &#34;debug-tweaks tools-sdk package-management&#34;
#//PACKAGE_CLASSES ?= &#34;package_deb&#34;


bitbake core-image-sato-dev
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>06042024_r200_cam_on_TX2_J120</title>
      <link>https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/</link>
      <pubDate>Tue, 04 Jun 2024 17:46:09 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/</guid>
      <description><![CDATA[<h1 id="realsense-r200-on-jetson-tx2-with-auvidea-j120-carrier-board">RealSense R200 on Jetson TX2 with Auvidea J120 carrier board</h1>
<ul>
<li>
<p>Patch Jetpack 4.3 (L4T R32.3.1) with Auvidea <a href="https://auvidea.eu/download/firmware/J120/J90-J120-J130_4_3.tar.bz2">J120 firmware v3.0</a> according to the README file in the tarball.
&ndash; As a side note, I cannot get latest v4.0 firmware to work with Jetpack 4.6, both USB ports on J120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware.
&ndash; Even with v3.0 firmware, there are some issues to live with: 1) only the top USB port is 3.0, the bottom USB port is only 2.0; 2) the FAN seems not working (cannot be detected by jtop).</p>
</li>
<li>
<p>Flash the patched L4T to TX2 on J120 board</p>
</li>
<li>
<p>Clone librealsense2.</p>
</li>
</ul>
<pre tabindex="0"><code>git clone https://github.com/IntelRealSense/librealsense.git
</code></pre><p>As of when this blog is being written, this commit is used:</p>
<pre tabindex="0"><code>commit ff8a9fb213ec1227394de4060743b0ed61171985 (HEAD -&gt; master, origin/master, origin/HEAD)
Merge: 4673a37d9 488c6ec3e
Author: Eran &lt;librealsense.eran@gmail.com&gt;
Date:   Sun Apr 21 12:01:57 2024 +0300

    PR #12864: Merge v2.55.1 to master
</code></pre><ul>
<li>Run permissions script from librealsense2 tot directory.</li>
</ul>
<pre tabindex="0"><code># Need to install v4l-utils first
sudo apt install v4l-utils
./scripts/setup_udev_rules.sh
</code></pre><ul>
<li>Build and apply patched kernel modules.</li>
</ul>
<pre tabindex="0"><code>./scripts/patch-realsense-ubuntu-L4T.sh
</code></pre><p>Check the log file of this script: <code>librealsense.patch.tx2.on.j120.log</code> inside this blog github directory.</p>
<ul>
<li>
<p>Follow section <em>Run RealSense R200 example apps</em> of previous blog to R200 examples.</p>
</li>
<li>
<p>Install SDK</p>
</li>
</ul>
<pre tabindex="0"><code>sudo apt install nvidia-jetpack
</code></pre><p><img src="tx2-on-j200-jtop.png" alt="jtop screenshot" title="jtop running on TX2 with J120 carrier board"></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>06032024_r200_cam_on_TX2</title>
      <link>https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/</link>
      <pubDate>Tue, 04 Jun 2024 17:44:06 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/</guid>
      <description><![CDATA[<h1 id="realsense-r200-camera-on-jetson-tx2-with-l4t-r3231">RealSense R200 Camera on Jetson TX2 with L4T R32.3.1</h1>
<p>Both RealSense R200 camera and NVidia Jetson TX2 are considered legacy hardwares today (when this post is written at June, 2024) and are replaced by their newly released siblings that are more capable and fancier. However, I happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.</p>
<h2 id="jetpack-and-l4t-versions">Jetpack and L4T versions</h2>
<ul>
<li>For some practical reason (I only got Auvidea J120 TX2 carrier board patching <a href="https://auvidea.eu/download/firmware/J120/J90-J120-J130_4_3.tar.bz2">firmware v3.0</a>, released on Feb 2020, working with JP4.3; the latest J120 v4.0 firmware released on Dec 2021 doesn&rsquo;t work for me on JP4.6/L4T32.6.1), I chose <a href="https://developer.nvidia.com/jetpack-33-archive">Jetpack 4.3</a> and <a href="https://developer.nvidia.com/l4t-3231-archive">L4T32.3.1</a> as the starting point on Jetson TX2.</li>
<li>This post talks about getting everything work on Jetson TX2 development kit, <strong>not</strong> on J120 carrier board though.</li>
<li>As a note for completeness, Jetson TX2 latest SDK is <a href="https://developer.nvidia.com/jetpack-sdk-464">Jetpack 4.6.4</a>, which couples with <a href="https://developer.nvidia.com/embedded/linux-tegra-r3274">L4T 32.7.4</a>.</li>
</ul>
<h2 id="realsense-r200-sdklibrary">RealSense R200 SDK/Library</h2>
<p>The latest SDK/library that supports the legacy RealSense R200 camera is <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.4">v1.12.4</a>, which seems a final release following the earlier said &ldquo;final&rdquo; release <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.1">v1.12.1</a>.</p>
<p>These blogs are good references:</p>
<ul>
<li>Running the RealSense R200 camera with librealsense and pyrealsense legacy libraries: <a href="https://idorobotics.com/2020/01/02/running-the-realsense-r200-camera-with-librealsense-and-pyrealsense-legacy-libraries/">link</a>.</li>
<li>Intel librealsense installation <a href="https://github.com/IntelRealSense/librealsense/blob/development/doc/installation.md#install-librealsense2">doc</a>, which was written for librealsense v2.0, however, this section works for v1.12.x which supports realsense R200.</li>
</ul>
<h2 id="patch-on-jetson-tx2-directly">Patch on Jetson TX2 directly</h2>
<p>(Not repeat all the details here, only for guidance, mileage varies if followed exactly below&hellip;)</p>
<p>On a freshly flashed TX2, follow the guidance listed on <a href="https://github.com/IntelRealSense/librealsense/blob/development/doc/installation.md#install-librealsense2">Intel librealsense installation</a>:</p>
<ul>
<li>Clone librealsense2.</li>
</ul>
<pre tabindex="0"><code>git clone https://github.com/IntelRealSense/librealsense.git
</code></pre><p>As of when this blog is being written, this commit is used:</p>
<pre tabindex="0"><code>commit ff8a9fb213ec1227394de4060743b0ed61171985 (HEAD -&gt; master, origin/master, origin/HEAD)
Merge: 4673a37d9 488c6ec3e
Author: Eran &lt;librealsense.eran@gmail.com&gt;
Date:   Sun Apr 21 12:01:57 2024 +0300

    PR #12864: Merge v2.55.1 to master
</code></pre><ul>
<li>Run permissions script from librealsense2 tot directory.</li>
</ul>
<pre tabindex="0"><code>./scripts/setup_udev_rules.sh
</code></pre><ul>
<li>Build and apply patched kernel modules.</li>
</ul>
<pre tabindex="0"><code>./scripts/patch-realsense-ubuntu-L4T.sh
</code></pre><h2 id="build-linux-kernel-from-source-on-x86-host">Build Linux kernel from source on x86 host</h2>
<p>The patching process can be done on Jetson TX2 itself (maybe simpler in that way as well) after flashing it with NVidia SDKManager with the right version of L4T mentioned above. However, since I&rsquo;m considering deploy Yocto onto the same platform as a later step, it is better to start with x86 host patching.</p>
<p>Good advices about building kernel from source on x86 host for Jetson platform:</p>
<ul>
<li>Auvidea J120 and Intel RealSense D435: <a href="https://forums.developer.nvidia.com/t/auvidea-j120-and-intel-realsense-d435/64999/8">link</a></li>
<li>TX2i WiFi support (the title is irrelevant but the message pointed to is good reference about general kernel compile from source): <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">link</a></li>
</ul>
<p>General L4T Kernel Customization <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3231/index.html?_gl=1*18jb7bx*_gcl_au*OTUwNjIzMDg4LjE3MTYyMjg0MTU.#page/Tegra%2520Linux%2520Driver%2520Package%2520Development%2520Guide%2Fkernel_custom.html%23wwpID0E02C0HA">reference</a> from official documentation of L4T.</p>
<h3 id="prerequesites">Prerequesites</h3>
<ul>
<li>Since we are building for a legacy system, Ubuntu 18.04 LTS is needed on x86.</li>
</ul>
<pre tabindex="0"><code>$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.6 LTS
Release:	18.04
Codename:	bionic
</code></pre><ul>
<li>
<p>A <code>.config</code> is preferred to be copied and saved from a freshly flashed TX2 to be used in later source compilation. How and why <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">here</a>.</p>
</li>
<li>
<p>Install cross-compile toolchain, following <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3231/index.html#page/Tegra%20Linux%20Driver%20Package%20Development%20Guide/xavier_toolchain.html">Jetson Linux Driver Package Toolchain</a> to install necessary tools.</p>
</li>
<li>
<p>Sync down the earlier mentioned librealsense git repository as mentioned in <a href="#patch-on-jetson-tx2">Patch on Jetson TX2</a>.</p>
</li>
</ul>
<h3 id="compile">Compile</h3>
<ul>
<li>Get L4T source code by using source_sync.sh, which can be downloaded from <code>~/nvidia/nvidia_sdk/JetPack_x.y.z_Linux_JETSON_TX2_TARGETS/Linux_for_Tegra/source_sync.sh</code> if you ever have flashed the system using SDKManager (you should have). Using this official script is easier to make sure downloaded sources are complete with matching versions of each subdirectories etc.</li>
</ul>
<pre tabindex="0"><code>mkdir -p ~/tx2_source_build/r32-3-1_Release_v1.0
cd ~/tx2_source_build/r32-3-1_Release_v1.0
./source_sync.sh -k tegra-l4t-r32.3.1
</code></pre><p>After successfully ran the scipt, you should see a <code>sources</code> directory:</p>
<pre tabindex="0"><code>$ tree -L 2 ./sources
./sources
├── hardware
│   └── nvidia
└── kernel
    ├── kernel-4.9
    ├── nvgpu
    └── nvidia
</code></pre><ul>
<li>Prepare and compile the kernel</li>
</ul>
<pre tabindex="0"><code>mkdir build
mkdir modules
export TEGRA_KERNEL_OUT=~/tx2_source_build/r32-3-1_Release_v1.0/build
export TEGRA_MODULES_OUT=~/tx2_source_build/r32-3-1_Release_v1.0/modules
export SRC=~/tx2_source_build/r32-3-1_Release_v1.0/sources/kernel/kernel-4.9/
export ARCH=arm64
export CROSS_COMPILE=~/src_install/l4t-gcc/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
</code></pre><p>Now overwrite the .config with the reserved/saved <code>.config</code> file into TEGRA_KERNEL_OUT (again, see <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">this post</a> about how and why to get the .config file from freshly flashed system instead of config it live); patch the kernels; then cross-compile.
This process is refering the Intel librealsense script <a href="https://github.com/IntelRealSense/librealsense/blob/master/scripts/patch-realsense-ubuntu-L4T.sh">patch-realsense-ubuntu-L4T.sh</a>.</p>
<pre tabindex="0"><code>cd $SRC

# Apply the librealsense patches
cp -r ~/tx2_source_build/librealsense/scripts/Tegra/LRS_Patches .
cp ~/tx2_source_build/config.gz.backup/tx2_devkit.r32.3.1.config ./.config

echo -e &#34;\e[32mUpdate the kernel tree to support HID IMU sensors\e[0m&#34;
sed -i &#39;/CONFIG_HID_SENSOR_ACCEL_3D/c\CONFIG_HID_SENSOR_ACCEL_3D=m&#39; .config
sed -i &#39;/CONFIG_HID_SENSOR_GYRO_3D/c\CONFIG_HID_SENSOR_GYRO_3D=m&#39; .config
sed -i &#39;/CONFIG_HID_SENSOR_IIO_COMMON/c\CONFIG_HID_SENSOR_IIO_COMMON=m\nCONFIG_HID_SENSOR_IIO_TRIGGER=m&#39; .config


echo -e &#34;\e[32mApply Librealsense Kernel Patches\e[0m&#34;

patch -p1 &lt; ./LRS_Patches/02-realsense-metadata-L4T-4.4.patch
patch -p1 &lt; ./LRS_Patches/03-realsense-hid-L4T-4.9.patch
patch -p1 &lt; ./LRS_Patches/05-realsense-powerlinefrequency-control-fix.patch

# The original 01-realsense-camera-formats-L4T-4.4.patch caused problem in patched 
# v4l2-ioctl.c, so I modified a local version, which can be found in this blog directory on github.
#patch -p1 &lt; ./LRS_Patches/01-realsense-camera-formats-L4T-4.4.patch
cp ~/tx2_source_build/01-realsense-camera-formats-L4T-4.4.mod.patch ./LRS_Patches
patch -p1 &lt; ./LRS_Patches/01-realsense-camera-formats-L4T-4.4.mod.patch


# Overwrite the .config files
cp ./.config  $TEGRA_KERNEL_OUT/.config
mv ./.config  $TEGRA_MODULES_OUT/.config

# Now compile
make ARCH=arm64 O=$TEGRA_KERNEL_OUT -j11 Image
make ARCH=arm64 O=$TEGRA_MODULES_OUT -j11 modules
# Build everything
make ARCH=arm64 O=$TEGRA_MODULES_OUT -j11

## More specifically, if incremental building on an earlier unpatched source tree
#make ARCH=arm64  M=drivers/media/usb/uvc O=$TEGRA_MODULES_OUT -j11 modules
#make ARCH=arm64  M=drivers/media/v4l2-core O=$TEGRA_MODULES_OUT -j11 modules
#make ARCH=arm64  M=drivers/iio  O=$TEGRA_MODULES_OUT -j11 modules

## These are the modified modules
export TEGRA_TAG=tegra-l4t-r32.3.1
#pushd $TEGRA_MODULES_OUT
#echo -e &#34;\e[32mCopying the patched modules to (~/) \e[0m&#34;
#cp drivers/media/usb/uvc/uvcvideo.ko ~/${TEGRA_TAG}-uvcvideo.ko
#cp drivers/media/v4l2-core/videobuf-vmalloc.ko ~/${TEGRA_TAG}-videobuf-vmalloc.ko
#cp drivers/media/v4l2-core/videobuf-core.ko ~/${TEGRA_TAG}-videobuf-core.ko
#cp drivers/iio/common/hid-sensors/hid-sensor-iio-common.ko ~/${TEGRA_TAG}-hid-sensor-iio-common.ko
#cp drivers/iio/common/hid-sensors/hid-sensor-trigger.ko ~/${TEGRA_TAG}-hid-sensor-trigger.ko
#cp drivers/iio/accel/hid-sensor-accel-3d.ko ~/${TEGRA_TAG}-hid-sensor-accel-3d.ko
#cp drivers/iio/gyro/hid-sensor-gyro-3d.ko ~/${TEGRA_TAG}-hid-sensor-gyro-3d.ko
#popd

# Install built modules to some directory
mkdir ~/tx2_source_build/r32-3-1_Release_v1.0/modules_install
sudo make ARCH=arm64 O=$TEGRA_MODULES_OUT modules_install INSTALL_MOD_PATH=~/tx2_source_build/r32-3-1_Release_v1.0/modules_install/
</code></pre><h3 id="install-built-kernelmodules-to-system">Install built kernel/modules to system</h3>
<p>Copy <code>$TEGRA_KERNEL_OUT/arch/arm64/boot/Image</code> and <code>modules_install/*</code> respectively to <code>tx2_system:/boot/Image</code> and <code>/lib/modules/</code>, and reboot the system will use our newly built kernel/modules etc.</p>
<p>The above way will overwrite original system kernel/modules, however, it would be better to back up original kernel Image to Image.backup, and then edit /boot/extlinux/extlinux.cfg:</p>
<pre tabindex="0"><code>TIMEOUT 30
DEFAULT primary

MENU TITLE L4T boot options

LABEL primary
      MENU LABEL primary kernel
      LINUX /boot/Image.r200_patched
      INITRD /boot/initrd
      APPEND ${cbootargs} quiet
#      APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4

# When testing a custom kernel, it is recommended that you create a backup of
# the original kernel and add a new entry to this file so that the device can
# fallback to the original kernel. To do this:
#
# 1, Make a backup of the original kernel
#      sudo cp /boot/Image /boot/Image.backup
#
# 2, Copy your custom kernel into /boot/Image
#
# 3, Uncomment below menu setting lines for the original kernel
#
# 4, Reboot

LABEL backup
   MENU LABEL backup kernel
   LINUX /boot/Image.backup
   INITRD /boot/initrd
   APPEND ${cbootargs} quiet
</code></pre><h2 id="run-realsense-r200-example-apps">Run RealSense R200 example apps</h2>
<p><em><strong>On the patched Jetson TX2 system</strong></em>:</p>
<ul>
<li>Get the The latest SDK/library that supports the legacy RealSense R200 camera is <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.4">v1.12.4</a></li>
</ul>
<pre tabindex="0"><code>wget https://github.com/IntelRealSense/librealsense/archive/refs/tags/v1.12.4.tar.gz
tar xvfz ./v1.12.4.tar.gz
</code></pre><ul>
<li>Build examples</li>
</ul>
<pre tabindex="0"><code>cd librealsense-1.12.4
mkdir build &amp;&amp; cd build
cmake .. -DBUILD_EXAMPLES:BOOL=true
make -j4
</code></pre><p>You will find these compiled successfully:</p>
<pre tabindex="0"><code>nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls examples/
CMakeFiles           cpp-callback    cpp-config-ui          cpp-motion-module  cpp-restart 
cpp-tutorial-2-streams     c-tutorial-2-streams cmake_install.cmake  cpp-callback-2 
cpp-enumerate-devices  cpp-multicam       cpp-stride            cpp-tutorial-3-pointcloud 
c-tutorial-3-pointcloud cpp-alignimages      cpp-capture    cpp-headless cpp-pointcloud 
cpp-tutorial-1-depth  c-tutorial-1-depth         Makefile

nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls -al *.so*
lrwxrwxrwx 1 nvidia nvidia       17 Jun  3 14:46 librealsense.so -&gt; librealsense.so.1
lrwxrwxrwx 1 nvidia nvidia       22 Jun  3 14:46 librealsense.so.1 -&gt; librealsense.so.1.12.4
-rwxrwxr-x 1 nvidia nvidia 11547184 Jun  3 14:46 librealsense.so.1.12.4

nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ./examples/cpp-tutorial-2-streams 
There are 1 connected RealSense devices.

Using device 0, an Intel RealSense R200
    Serial number: xxxxxxxx
    Firmware version: 1.0.72.06
</code></pre><p><img src="r200-example-run-screenshot.png" alt="R200 camera running tutorial" title="r200 running"></p>
<ul>
<li>Run on-board CSI camera</li>
</ul>
<pre tabindex="0"><code>gst-launch-1.0 nvarguscamerasrc ! nvvidconv ! xvimagesink
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>My First Post</title>
      <link>https://jinchenglee.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 01 Jun 2024 18:19:45 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/my-first-post/</guid>
      <description><![CDATA[<p>This is my first blog using Hugo generated contents backed by github.io.</p>
<p>It records how to add new blog article using markdown.</p>
<h2 id="steps-to-add-a-blog-article">Steps to add a blog article</h2>
<ol>
<li>Go to synced down <a href="https://github.com/jinchenglee/blog_markdown">blog_markdown</a>.</li>
<li>Create new markdown file.</li>
</ol>
<pre tabindex="0"><code>cd blog_markdown/vitob-blog
hugo new content posts/&lt;dir name&gt;/index.md
</code></pre><ol start="3">
<li>Edit xxx.md</li>
<li>Preview by running &lsquo;$&gt; hugo server -D&rsquo;</li>
</ol>
<h2 id="continue-steps-to-publish">Continue; Steps to publish</h2>
<ol start="5">
<li>If satisfied with preview at http://localhost:1313/, changing &lsquo;draft = true&rsquo; to &lsquo;draft = false&rsquo; in xxx.md. Then run &lsquo;$&gt; hugo&rsquo; to generate contents under public subdirectory.</li>
<li>Copy or move public/* to synced down <a href="git@github.com:jinchenglee/jinchenglee.github.io.git">github.io</a> repository and then push it to github.</li>
</ol>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
