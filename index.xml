<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Vitob&#39;s Blog Site</title>
    <link>https://jinchenglee.github.io/</link>
    <description>Recent content on Vitob&#39;s Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2024 21:42:50 -0700</lastBuildDate><atom:link href="https://jinchenglee.github.io/index.xml" rel="self" type="application/rss+xml" /><icon>https://jinchenglee.github.io/img/icon.svg</icon>
    
    
    <item>
      <title>Yocto on TX2 with Jetpack4.3</title>
      <link>https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/</link>
      <pubDate>Mon, 10 Jun 2024 17:08:34 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06102024_yocto_on_tx2/</guid>
      <description><![CDATA[<p>#Yocto on TX2 with Jetpack4.3</p>
<p>This blog tries to build TX2 image with industry-default flow for embedded system &ndash; the Yocto project, for ancient Jetson TX2 with Jetpack 4.3 (L4T R32.3.1).</p>
<h2 id="default-meta-tegra-build">Default meta-tegra build</h2>
<ul>
<li>Sync down meta-tegra with right branch <a href="https://github.com/OE4T/meta-tegra/tree/dunfell-l4t-r32.3.1"><code>dunfell-l4t-r32.3.1</code></a>. Also, please check <a href="https://github.com/OE4T/meta-tegra/wiki/L4T-R32.3.1-Notes">L4T R32.3.1 Notes</a>.</li>
</ul>
<pre tabindex="0"><code>cd ~ &amp;&amp; mkdir yocto-tx2-jp43 &amp;&amp; cd yocto-tx2-jp43
git clone https://github.com/OE4T/meta-tegra.git 
cd meta-tegra
git branch -a
git checkout dunfell-l4t-r32.3.1
</code></pre><ul>
<li>Sync down poky with right branch <code>dunfell</code>.</li>
</ul>
<pre tabindex="0"><code>cd ~/yocto-tx2-jp32
git clone https://github.com/yoctoproject/poky.git
cd poky
git branch -a
git checkout dunfell
</code></pre><ul>
<li>Active environment</li>
</ul>
<pre tabindex="0"><code>source poky/oe-init-build-env
</code></pre><ul>
<li>Add configurations to build/conf/local.conf</li>
</ul>
<pre tabindex="0"><code>MACHINE ??= &#34;jetson-tx2&#34;

DL_DIR ?= &#34;/home/${USER}/Yocto/downloads&#34;

SSTATE_DIR ?= &#34;/home/${USER}/Yocto/sstate_dir&#34;

IMAGE_CLASSES += &#34;image_types_tegra&#34;

PREFERRED_VERSION_python3 = &#34;3.8%&#34;
PREFERRED_VERSION_python3-native = &#34;3.8%&#34;

BB_NUMBER_THREADS = &#39;11&#39;
PARALLEL_MAKE = &#39;-j11&#39;
</code></pre><ul>
<li>Add configuration to build/conf/bblayers.conf</li>
</ul>
<pre tabindex="0"><code>/home/${USER}/yocto-tegra/meta-tegra \
</code></pre><p>The bblayers.conf looks like:</p>
<pre tabindex="0"><code>#// POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
#// changes incompatibly
POKY_BBLAYERS_CONF_VERSION = &#34;2&#34;

BBPATH = &#34;${TOPDIR}&#34;
BBFILES ?= &#34;&#34;

BBLAYERS ?= &#34; \
  /home/${USER}/yocto-tegra/meta-tegra \
  /home/${USER}/yocto-tx2-jp43/poky/meta \
  /home/${USER}/yocto-tx2-jp43/poky/meta-poky \
  /home/${USER}/yocto-tx2-jp43/poky/meta-yocto-bsp \
  &#34;
</code></pre><h3 id="build-core-image-minimal">Build core-image-minimal.</h3>
<pre tabindex="0"><code>bitbake core-image-minimal
</code></pre><p>Successful completion of the built shows sth. like below. I&rsquo;m running on a previously built cache, so a lot of tasks don&rsquo;t need re-run. If you are running from scratch, this process can take pretty long depending on your host machine (~hours).</p>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal
Loading cache: 100% |#####################################################################################################| Time: 0:00:00
Loaded 1486 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;ubuntu-18.04&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;

Initialising tasks: 100% |################################################################################################| Time: 0:00:01
Sstate summary: Wanted 1203 Found 1199 Missed 4 Current 0 (99% match, 0% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 3200 tasks of which 2952 didn&#39;t need to be rerun and all succeeded.
</code></pre><ul>
<li>Deploy</li>
</ul>
<p>Using this script:</p>
<pre tabindex="0"><code>#!/bin/bash

image=$1
machine=$2

scriptdir=&#34;$( cd &#34;$( dirname &#34;${BASH_SOURCE[0]}&#34; )&#34; &gt;/dev/null &amp;&amp; pwd )&#34;
deployfile=${image}-${machine}.tegraflash.zip
tmpdir=`mktemp`

rm -rf $tmpdir
mkdir -p $tmpdir
echo &#34;Using temp directory $tmpdir&#34;
pushd $tmpdir
cp $scriptdir/build/tmp/deploy/images/${machine}/$deployfile .
unzip $deployfile
set -e
sudo ./doflash.sh
popd
echo &#34;Removing temp directory $tmpdir&#34;
rm -rf $tmpdir
</code></pre><p>Put Jetson TX2 development kit into force recovery mode by:</p>
<ol>
<li>Press down REC button and not release</li>
<li>Press down POWER button and release</li>
<li>Release REC button</li>
</ol>
<p>To make sure the board has entered recoverage mode, check lsusb on host:</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tegra$ lsusb
...
Bus 003 Device 013: ID 0955:7c18 NVidia Corp.                  &lt;= Check this line. 
...
</code></pre><p>Run the deploy command:</p>
<pre tabindex="0"><code>:~/yocto-tx2-jp43$ sudo ./deploy.sh core-image-minimal jetson-tx2
</code></pre><p>On the debug serial port or the connected monitor to TX2, you should see this:</p>
<pre tabindex="0"><code>Poky (Yocto Project Reference Distro) 3.1.33 jetson-tx2 /dev/ttyXXX

jetson-tx2 login:
</code></pre><p>Using <code>root</code> without password should login you in.</p>
<h3 id="build-core-image-sato-dev">Build core-image-sato-dev</h3>
<p>Similarly, we can build an image with GUI from yocto:</p>
<pre tabindex="0"><code>bitbake core-image-sato-dev
</code></pre><p>Using the same deploy.sh script to flash:</p>
<pre tabindex="0"><code>sudo ./deploy.sh core-image-sato-dev jetson-tx2
</code></pre><h2 id="patch-kernel-with-preempt-rt">Patch kernel with PREEMPT-RT</h2>
<p>PREEMPT-RT patches are for real-time applications on Linux. The patching process described below refers to these links:</p>
<ol>
<li><a href="https://forums.developer.nvidia.com/t/preempt-rt-patches-for-jetson-nano/72941">PREEMPT-RT patches for Jetson Nano</a></li>
<li><a href="https://github.com/OE4T/meta-tegra/wiki/Applying-PREEMPT-RT-Patches-dunfell-l4t-r32.4.3">Applying PREEMPT RT Patches dunfell l4t r32.4.3</a></li>
</ol>
<h3 id="getting-ready-for-kernel-dev-using-devtool-according-to-yocto-doc9httpsdocsyoctoprojectorgkernel-devcommonhtmlgetting-ready-to-develop-using-devtool">Getting Ready for kernel-dev Using devtool according to <a href="9https://docs.yoctoproject.org/kernel-dev/common.html#getting-ready-to-develop-using-devtool">Yocto Doc</a>.</h3>
<p>Update local.conf file:</p>
<pre tabindex="0"><code>MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += &#34;kernel-modules&#34;
</code></pre><ul>
<li>Create a layer for patches and inform BitBake build env about the newly added layer:</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43$ cd build/
xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers create-layer ../meta-tx2-jp43
NOTE: Starting bitbake server...
Add your new layer with &#39;bitbake-layers add-layer ../meta-tx2-jp43&#39;

xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake-layers add-layer ../meta-tx2-jp43/
NOTE: Starting bitbake server...
</code></pre><p>The last commad will add the newly added layer to your build/conf/bblayers.conf</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ cat conf/bblayers.conf 
#// POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf
#// changes incompatibly
POKY_BBLAYERS_CONF_VERSION = &#34;2&#34;

BBPATH = &#34;${TOPDIR}&#34;
BBFILES ?= &#34;&#34;

BBLAYERS ?= &#34; \
  /home/${USER}/yocto-tegra/meta-tegra \
  /home/${USER}/yocto-tx2-jp43/poky/meta \
  /home/${USER}/yocto-tx2-jp43/poky/meta-poky \
  /home/${USER}/yocto-tx2-jp43/poky/meta-yocto-bsp \
  /home/&lt;your user name&gt;/yocto-tx2-jp43/meta-tx2-jp43 \
  &#34;
</code></pre><ul>
<li>Bitbake core-image-minimal to make sure everything is ok.</li>
</ul>
<pre tabindex="0"><code>@ubuntu18:~/yocto-tx2-jp43/build$ bitbake core-image-minimal
Parsing recipes: 100% |###################################################################################################| Time: 0:00:12
Parsing of 876 .bb files complete (0 cached, 876 parsed). 1487 targets, 74 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;universal&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;
meta-tx2-jp43        = &#34;&lt;unknown&gt;:&lt;unknown&gt;&#34;         &lt;= NOTICE the blank &#34;UNKNOWN&#34; here!

Initialising tasks: 100% |################################################################################################| Time: 0:00:01
Sstate summary: Wanted 367 Found 359 Missed 8 Current 836 (97% match, 99% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 3200 tasks of which 3186 didn&#39;t need to be rerun and all succeeded.
</code></pre><h3 id="using-devtool-to-patch-the-kernel">Using devtool to Patch the Kernel</h3>
<p>According to <a href="https://docs.yoctoproject.org/kernel-dev/common.html#using-devtool-to-patch-the-kernel">Yocto Doc</a>.</p>
<ul>
<li>Check out kernel source files.</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool modify linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
Loading cache: 100% |#####################################################################################################| Time: 0:00:00
Loaded 1487 entries from dependency cache.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION           = &#34;1.46.0&#34;
BUILD_SYS            = &#34;x86_64-linux&#34;
NATIVELSBSTRING      = &#34;universal&#34;
TARGET_SYS           = &#34;aarch64-poky-linux&#34;
MACHINE              = &#34;jetson-tx2&#34;
DISTRO               = &#34;poky&#34;
DISTRO_VERSION       = &#34;3.1.33&#34;
TUNE_FEATURES        = &#34;aarch64 armv8a crc&#34;
TARGET_FPU           = &#34;&#34;
meta-tegra           = &#34;dunfell-l4t-r32.3.1:12ca32302b4d23045d1dc19102d0c21670052f7d&#34;
meta                 
meta-poky            
meta-yocto-bsp       = &#34;dunfell:63d05fc061006bf1a88630d6d91cdc76ea33fbf2&#34;
meta-tx2-jp43        
workspace            = &#34;&lt;unknown&gt;:&lt;unknown&gt;&#34;

Initialising tasks: 100% |################################################################################################| Time: 0:00:00
Sstate summary: Wanted 55 Found 54 Missed 1 Current 50 (98% match, 99% complete)
NOTE: Executing Tasks
NOTE: Tasks Summary: Attempted 474 tasks of which 463 didn&#39;t need to be rerun and all succeeded.
INFO: Adding local source files to srctree...
INFO: Copying kernel config to srctree
INFO: Source tree extracted to /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
INFO: Recipe linux-tegra now set up to build from /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
</code></pre><ul>
<li>Patch the kernel source and build the kernel:</li>
</ul>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build/workspace/sources/linux-tegra$ ./scripts/rt-patch.sh apply-patches
PREEMPT RT patches successfully applied for Auto!
PREEMPT RT patches successfully applied for L4T!
</code></pre><p>Using git status can see a bunch of files are modified and another bunch are added. However, when trying to build kernel exposes build errors:</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
...
NOTE: Executing Tasks
NOTE: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
ERROR: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: oe_runmake failed
ERROR: linux-tegra-4.9.140+git999-r0 do_compile_kernelmodules: Execution of &#39;/home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/run.do_compile_kernelmodules.17505&#39; failed with exit code 1
ERROR: Logfile of failure stored in: /home/xxx/yocto-tx2-jp43/build/tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/temp/log.do_compile_kernelmodules.17505

(Details:)
...
/home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c:1606:23: error: passing argument 1 of &#39;waitqueue_active&#39; from incompatible pointer type [-Werror=incompatible-pointer-types]
 1606 |  if (waitqueue_active(&amp;_pno_state-&gt;get_batch_done.wait))
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                       |
      |                       struct swait_queue_head *
...

$ vim ~/yocto-tx2-jp43/build/workspace/sources/linux-tegra/nvidia/drivers/net/wireless/bcmdhd/dhd_pno.c
1600 #if IS_ENABLED(CONFIG_PREEMPT_RT_FULL)
1601         if (swait_active(&amp;_pno_state-&gt;get_batch_done.wait))
1602 #else
1603 #if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(4, 14, 57)
1604         if (waitqueue_active((struct wait_queue_head *)&amp;_pno_state-&gt;get_batch_done.wait))
1605 #else
1606         if (waitqueue_active(&amp;_pno_state-&gt;get_batch_done.wait))     &lt;= ERROR HERE!
1607 #endif
1608 #endif
</code></pre><ul>
<li>Modify kernel configuration</li>
</ul>
<p>Google around shows the error could be avoided if <code>CONFIG_PREEMPT_RT_FULL</code> is defined in .config before kernel compilation. (BTW, there is another fix option <a href="https://github.com/rockchip-linux/kernel/issues/261#issuecomment-1003837100">here</a> but I don&rsquo;t try this way.)</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ bitbake -c menuconfig virtual/kernel
</code></pre><p>Select &ldquo;Kernel features -&gt; Preemption Model (&hellip;)&rdquo; and select &ldquo;Fully Preemptible Kernel (RT)&rdquo;.</p>
<ul>
<li>Save the modified kernel configuration</li>
</ul>
<pre tabindex="0"><code>$ bitbake -c savedefconfig virtual/kernel
$ cp ./tmp/work/jetson_tx2-poky-linux/linux-tegra/4.9.140+git999-r0/linux-tegra-4.9.140+git999/defconfig ./workspace/sources/linux-tegra/arch/arm64/configs/defconfig
</code></pre><p>Now compile again, it should finish successfully.</p>
<pre tabindex="0"><code>xxx@ubuntu18:~/yocto-tx2-jp43/build$ devtool build linux-tegra
NOTE: Starting bitbake server...
NOTE: Reconnecting to bitbake server...
NOTE: Retrying server connection (#1)...
...
WARNING: /home/xxx/yocto-tegra/meta-tegra/recipes-kernel/linux/linux-tegra_4.9.bb:do_compile is tainted from a forced run ETA:  0:00:00
Initialising tasks: 100% |################################################################################################| Time: 0:00:02
Sstate summary: Wanted 324 Found 322 Missed 2 Current 698 (99% match, 99% complete)
NOTE: Executing Tasks
NOTE: linux-tegra: compiling from external source tree /home/xxx/yocto-tx2-jp43/build/workspace/sources/linux-tegra
NOTE: Tasks Summary: Attempted 2648 tasks of which 2627 didn&#39;t need to be rerun and all succeeded.

Summary: There was 1 WARNING message shown.
</code></pre><ul>
<li>Create the image with modified kernel</li>
</ul>
<pre tabindex="0"><code>$ devtool build-image core-image-sato-dev
</code></pre><p>Flash the TX2 and you can see the patched kernel bootstrap successfully.</p>
<pre tabindex="0"><code>root@jetson-tx2:~# uname -a
Linux jetson-tx2 4.9.140-rt93-l4t-r32.3.1+ga0004d2ad6a4 #1 SMP PREEMPT RT Mon Jun 10 18:20:28 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux
</code></pre><h3 id="save-the-patch-work-for-future-use">Save the patch work for future use</h3>
<ul>
<li>Stage and commit local changes to the kernel</li>
</ul>
<pre tabindex="0"><code>$ cd workspace/sources/linux-tegra

-- Commit everything (new and modifed) ---
commit 9d4a27452b73870aa07a13883818284c310331e3 (HEAD -&gt; patches-l4t-r32.3.1)
Author: OpenEmbedded &lt;oe.patch@oe&gt;
Date:   Mon Jun 10 12:38:42 2024 -0700

    My patch for Jetson TX2 with Jetpack 4.3/L4T R32.3.1 and PREEMPT-RT.

-- Save a copy of defconfig and localversion_auto.cfg to DL_DIR (defined in local.conf).
$ cp defconfig ~/Yocto/downloads/
$ cp localversion_auto.cfg ~/Yocto/downloads/

-- Export the changes in the commit as patches and create a .bbappend file in layer specificed (meta-tx2-jp43): 
$ devtool finish linux-tegra ../meta-tx2-jp43

$:~/yocto-tx2-jp43$ tree meta-tx2-jp43
meta-tx2-jp43
├── conf
│   └── layer.conf
├── COPYING.MIT
├── README
...
└── recipes-kernel
    └── linux
        ├── linux-tegra-4.9
        │   ├── 0001-My-patch-for-Jetson-TX2-with-Jetpack-4.3-L4T-R32.3.1.patch
        │   └── devtool-fragment.cfg
        └── linux-tegra_4.9.bb
</code></pre><ul>
<li>Create a repository for the layer
Created the layer on github <a href="https://github.com/jinchenglee/meta-tx2-jp43">repo</a>.</li>
</ul>
<h2 id="yocto-build-with-rt-patch-from-scratch">Yocto build with RT patch from scratch</h2>
<p>Now we can use Yocto and our customized layer to build RT-patched Linux from scratch for Jetson TX2 with Jetpack 4.3 and L4T R32.3.1.</p>
<pre tabindex="0"><code>git clone https://github.com/OE4T/meta-tegra.git 
cd meta-tegra &amp;&amp; git checkout dunfell-l4t-r32.3.1 &amp;&amp; cd ..

git clone https://github.com/yoctoproject/poky.git
cd poky &amp;&amp; git checkout dunfell &amp;&amp; cd ..

git clone https://github.com/jinchenglee/meta-tx2-jp43

source poky/oe-init-build-env

#// Make necessary changes to build/conf/local.conf and build/conf/bblayers.conf
#// For example, add below to local.conf:
#//
#//EXTRA_IMAGE_FEATURES ?= &#34;debug-tweaks tools-sdk package-management&#34;
#//PACKAGE_CLASSES ?= &#34;package_deb&#34;


bitbake core-image-sato-dev
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>06042024_r200_cam_on_TX2_J120</title>
      <link>https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/</link>
      <pubDate>Tue, 04 Jun 2024 17:46:09 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06042024_r200_cam_on_tx2_j120/</guid>
      <description><![CDATA[<h1 id="realsense-r200-on-jetson-tx2-with-auvidea-j120-carrier-board">RealSense R200 on Jetson TX2 with Auvidea J120 carrier board</h1>
<ul>
<li>
<p>Patch Jetpack 4.3 (L4T R32.3.1) with Auvidea <a href="https://auvidea.eu/download/firmware/J120/J90-J120-J130_4_3.tar.bz2">J120 firmware v3.0</a> according to the README file in the tarball.
&ndash; As a side note, I cannot get latest v4.0 firmware to work with Jetpack 4.6, both USB ports on J120 boards are not detecting any devices, even mouse/keyboard, so revert to v3.0 firmware.
&ndash; Even with v3.0 firmware, there are some issues to live with: 1) only the top USB port is 3.0, the bottom USB port is only 2.0; 2) the FAN seems not working (cannot be detected by jtop).</p>
</li>
<li>
<p>Flash the patched L4T to TX2 on J120 board</p>
</li>
<li>
<p>Clone librealsense2.</p>
</li>
</ul>
<pre tabindex="0"><code>git clone https://github.com/IntelRealSense/librealsense.git
</code></pre><p>As of when this blog is being written, this commit is used:</p>
<pre tabindex="0"><code>commit ff8a9fb213ec1227394de4060743b0ed61171985 (HEAD -&gt; master, origin/master, origin/HEAD)
Merge: 4673a37d9 488c6ec3e
Author: Eran &lt;librealsense.eran@gmail.com&gt;
Date:   Sun Apr 21 12:01:57 2024 +0300

    PR #12864: Merge v2.55.1 to master
</code></pre><ul>
<li>Run permissions script from librealsense2 tot directory.</li>
</ul>
<pre tabindex="0"><code># Need to install v4l-utils first
sudo apt install v4l-utils
./scripts/setup_udev_rules.sh
</code></pre><ul>
<li>Build and apply patched kernel modules.</li>
</ul>
<pre tabindex="0"><code>./scripts/patch-realsense-ubuntu-L4T.sh
</code></pre><p>Check the log file of this script: <code>librealsense.patch.tx2.on.j120.log</code> inside this blog github directory.</p>
<ul>
<li>
<p>Follow section <em>Run RealSense R200 example apps</em> of previous blog to R200 examples.</p>
</li>
<li>
<p>Install SDK</p>
</li>
</ul>
<pre tabindex="0"><code>sudo apt install nvidia-jetpack
</code></pre><p><img src="tx2-on-j200-jtop.png" alt="jtop screenshot" title="jtop running on TX2 with J120 carrier board"></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>06032024_r200_cam_on_TX2</title>
      <link>https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/</link>
      <pubDate>Tue, 04 Jun 2024 17:44:06 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/06032024_r200_cam_on_tx2/</guid>
      <description><![CDATA[<h1 id="realsense-r200-camera-on-jetson-tx2-with-l4t-r3231">RealSense R200 Camera on Jetson TX2 with L4T R32.3.1</h1>
<p>Both RealSense R200 camera and NVidia Jetson TX2 are considered legacy hardwares today (when this post is written at June, 2024) and are replaced by their newly released siblings that are more capable and fancier. However, I happen to have both and it is a pitty to have them collect dust on shelf, thus the effort.</p>
<h2 id="jetpack-and-l4t-versions">Jetpack and L4T versions</h2>
<ul>
<li>For some practical reason (I only got Auvidea J120 TX2 carrier board patching <a href="https://auvidea.eu/download/firmware/J120/J90-J120-J130_4_3.tar.bz2">firmware v3.0</a>, released on Feb 2020, working with JP4.3; the latest J120 v4.0 firmware released on Dec 2021 doesn&rsquo;t work for me on JP4.6/L4T32.6.1), I chose <a href="https://developer.nvidia.com/jetpack-33-archive">Jetpack 4.3</a> and <a href="https://developer.nvidia.com/l4t-3231-archive">L4T32.3.1</a> as the starting point on Jetson TX2.</li>
<li>This post talks about getting everything work on Jetson TX2 development kit, <strong>not</strong> on J120 carrier board though.</li>
<li>As a note for completeness, Jetson TX2 latest SDK is <a href="https://developer.nvidia.com/jetpack-sdk-464">Jetpack 4.6.4</a>, which couples with <a href="https://developer.nvidia.com/embedded/linux-tegra-r3274">L4T 32.7.4</a>.</li>
</ul>
<h2 id="realsense-r200-sdklibrary">RealSense R200 SDK/Library</h2>
<p>The latest SDK/library that supports the legacy RealSense R200 camera is <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.4">v1.12.4</a>, which seems a final release following the earlier said &ldquo;final&rdquo; release <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.1">v1.12.1</a>.</p>
<p>These blogs are good references:</p>
<ul>
<li>Running the RealSense R200 camera with librealsense and pyrealsense legacy libraries: <a href="https://idorobotics.com/2020/01/02/running-the-realsense-r200-camera-with-librealsense-and-pyrealsense-legacy-libraries/">link</a>.</li>
<li>Intel librealsense installation <a href="https://github.com/IntelRealSense/librealsense/blob/development/doc/installation.md#install-librealsense2">doc</a>, which was written for librealsense v2.0, however, this section works for v1.12.x which supports realsense R200.</li>
</ul>
<h2 id="patch-on-jetson-tx2-directly">Patch on Jetson TX2 directly</h2>
<p>(Not repeat all the details here, only for guidance, mileage varies if followed exactly below&hellip;)</p>
<p>On a freshly flashed TX2, follow the guidance listed on <a href="https://github.com/IntelRealSense/librealsense/blob/development/doc/installation.md#install-librealsense2">Intel librealsense installation</a>:</p>
<ul>
<li>Clone librealsense2.</li>
</ul>
<pre tabindex="0"><code>git clone https://github.com/IntelRealSense/librealsense.git
</code></pre><p>As of when this blog is being written, this commit is used:</p>
<pre tabindex="0"><code>commit ff8a9fb213ec1227394de4060743b0ed61171985 (HEAD -&gt; master, origin/master, origin/HEAD)
Merge: 4673a37d9 488c6ec3e
Author: Eran &lt;librealsense.eran@gmail.com&gt;
Date:   Sun Apr 21 12:01:57 2024 +0300

    PR #12864: Merge v2.55.1 to master
</code></pre><ul>
<li>Run permissions script from librealsense2 tot directory.</li>
</ul>
<pre tabindex="0"><code>./scripts/setup_udev_rules.sh
</code></pre><ul>
<li>Build and apply patched kernel modules.</li>
</ul>
<pre tabindex="0"><code>./scripts/patch-realsense-ubuntu-L4T.sh
</code></pre><h2 id="build-linux-kernel-from-source-on-x86-host">Build Linux kernel from source on x86 host</h2>
<p>The patching process can be done on Jetson TX2 itself (maybe simpler in that way as well) after flashing it with NVidia SDKManager with the right version of L4T mentioned above. However, since I&rsquo;m considering deploy Yocto onto the same platform as a later step, it is better to start with x86 host patching.</p>
<p>Good advices about building kernel from source on x86 host for Jetson platform:</p>
<ul>
<li>Auvidea J120 and Intel RealSense D435: <a href="https://forums.developer.nvidia.com/t/auvidea-j120-and-intel-realsense-d435/64999/8">link</a></li>
<li>TX2i WiFi support (the title is irrelevant but the message pointed to is good reference about general kernel compile from source): <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">link</a></li>
</ul>
<p>General L4T Kernel Customization <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3231/index.html?_gl=1*18jb7bx*_gcl_au*OTUwNjIzMDg4LjE3MTYyMjg0MTU.#page/Tegra%2520Linux%2520Driver%2520Package%2520Development%2520Guide%2Fkernel_custom.html%23wwpID0E02C0HA">reference</a> from official documentation of L4T.</p>
<h3 id="prerequesites">Prerequesites</h3>
<ul>
<li>Since we are building for a legacy system, Ubuntu 18.04 LTS is needed on x86.</li>
</ul>
<pre tabindex="0"><code>$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.6 LTS
Release:	18.04
Codename:	bionic
</code></pre><ul>
<li>
<p>A <code>.config</code> is preferred to be copied and saved from a freshly flashed TX2 to be used in later source compilation. How and why <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">here</a>.</p>
</li>
<li>
<p>Install cross-compile toolchain, following <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3231/index.html#page/Tegra%20Linux%20Driver%20Package%20Development%20Guide/xavier_toolchain.html">Jetson Linux Driver Package Toolchain</a> to install necessary tools.</p>
</li>
<li>
<p>Sync down the earlier mentioned librealsense git repository as mentioned in <a href="#patch-on-jetson-tx2">Patch on Jetson TX2</a>.</p>
</li>
</ul>
<h3 id="compile">Compile</h3>
<ul>
<li>Get L4T source code by using source_sync.sh, which can be downloaded from <code>~/nvidia/nvidia_sdk/JetPack_x.y.z_Linux_JETSON_TX2_TARGETS/Linux_for_Tegra/source_sync.sh</code> if you ever have flashed the system using SDKManager (you should have). Using this official script is easier to make sure downloaded sources are complete with matching versions of each subdirectories etc.</li>
</ul>
<pre tabindex="0"><code>mkdir -p ~/tx2_source_build/r32-3-1_Release_v1.0
cd ~/tx2_source_build/r32-3-1_Release_v1.0
./source_sync.sh -k tegra-l4t-r32.3.1
</code></pre><p>After successfully ran the scipt, you should see a <code>sources</code> directory:</p>
<pre tabindex="0"><code>$ tree -L 2 ./sources
./sources
├── hardware
│   └── nvidia
└── kernel
    ├── kernel-4.9
    ├── nvgpu
    └── nvidia
</code></pre><ul>
<li>Prepare and compile the kernel</li>
</ul>
<pre tabindex="0"><code>mkdir build
mkdir modules
export TEGRA_KERNEL_OUT=~/tx2_source_build/r32-3-1_Release_v1.0/build
export TEGRA_MODULES_OUT=~/tx2_source_build/r32-3-1_Release_v1.0/modules
export SRC=~/tx2_source_build/r32-3-1_Release_v1.0/sources/kernel/kernel-4.9/
export ARCH=arm64
export CROSS_COMPILE=~/src_install/l4t-gcc/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
</code></pre><p>Now overwrite the .config with the reserved/saved <code>.config</code> file into TEGRA_KERNEL_OUT (again, see <a href="https://forums.developer.nvidia.com/t/tx2i-wifi-support/63839/2">this post</a> about how and why to get the .config file from freshly flashed system instead of config it live); patch the kernels; then cross-compile.
This process is refering the Intel librealsense script <a href="https://github.com/IntelRealSense/librealsense/blob/master/scripts/patch-realsense-ubuntu-L4T.sh">patch-realsense-ubuntu-L4T.sh</a>.</p>
<pre tabindex="0"><code>cd $SRC

# Apply the librealsense patches
cp -r ~/tx2_source_build/librealsense/scripts/Tegra/LRS_Patches .
cp ~/tx2_source_build/config.gz.backup/tx2_devkit.r32.3.1.config ./.config

echo -e &#34;\e[32mUpdate the kernel tree to support HID IMU sensors\e[0m&#34;
sed -i &#39;/CONFIG_HID_SENSOR_ACCEL_3D/c\CONFIG_HID_SENSOR_ACCEL_3D=m&#39; .config
sed -i &#39;/CONFIG_HID_SENSOR_GYRO_3D/c\CONFIG_HID_SENSOR_GYRO_3D=m&#39; .config
sed -i &#39;/CONFIG_HID_SENSOR_IIO_COMMON/c\CONFIG_HID_SENSOR_IIO_COMMON=m\nCONFIG_HID_SENSOR_IIO_TRIGGER=m&#39; .config


echo -e &#34;\e[32mApply Librealsense Kernel Patches\e[0m&#34;

patch -p1 &lt; ./LRS_Patches/02-realsense-metadata-L4T-4.4.patch
patch -p1 &lt; ./LRS_Patches/03-realsense-hid-L4T-4.9.patch
patch -p1 &lt; ./LRS_Patches/05-realsense-powerlinefrequency-control-fix.patch

# The original 01-realsense-camera-formats-L4T-4.4.patch caused problem in patched 
# v4l2-ioctl.c, so I modified a local version, which can be found in this blog directory on github.
#patch -p1 &lt; ./LRS_Patches/01-realsense-camera-formats-L4T-4.4.patch
cp ~/tx2_source_build/01-realsense-camera-formats-L4T-4.4.mod.patch ./LRS_Patches
patch -p1 &lt; ./LRS_Patches/01-realsense-camera-formats-L4T-4.4.mod.patch


# Overwrite the .config files
cp ./.config  $TEGRA_KERNEL_OUT/.config
mv ./.config  $TEGRA_MODULES_OUT/.config

# Now compile
make ARCH=arm64 O=$TEGRA_KERNEL_OUT -j11 Image
make ARCH=arm64 O=$TEGRA_MODULES_OUT -j11 modules
# Build everything
make ARCH=arm64 O=$TEGRA_MODULES_OUT -j11

## More specifically, if incremental building on an earlier unpatched source tree
#make ARCH=arm64  M=drivers/media/usb/uvc O=$TEGRA_MODULES_OUT -j11 modules
#make ARCH=arm64  M=drivers/media/v4l2-core O=$TEGRA_MODULES_OUT -j11 modules
#make ARCH=arm64  M=drivers/iio  O=$TEGRA_MODULES_OUT -j11 modules

## These are the modified modules
export TEGRA_TAG=tegra-l4t-r32.3.1
#pushd $TEGRA_MODULES_OUT
#echo -e &#34;\e[32mCopying the patched modules to (~/) \e[0m&#34;
#cp drivers/media/usb/uvc/uvcvideo.ko ~/${TEGRA_TAG}-uvcvideo.ko
#cp drivers/media/v4l2-core/videobuf-vmalloc.ko ~/${TEGRA_TAG}-videobuf-vmalloc.ko
#cp drivers/media/v4l2-core/videobuf-core.ko ~/${TEGRA_TAG}-videobuf-core.ko
#cp drivers/iio/common/hid-sensors/hid-sensor-iio-common.ko ~/${TEGRA_TAG}-hid-sensor-iio-common.ko
#cp drivers/iio/common/hid-sensors/hid-sensor-trigger.ko ~/${TEGRA_TAG}-hid-sensor-trigger.ko
#cp drivers/iio/accel/hid-sensor-accel-3d.ko ~/${TEGRA_TAG}-hid-sensor-accel-3d.ko
#cp drivers/iio/gyro/hid-sensor-gyro-3d.ko ~/${TEGRA_TAG}-hid-sensor-gyro-3d.ko
#popd

# Install built modules to some directory
mkdir ~/tx2_source_build/r32-3-1_Release_v1.0/modules_install
sudo make ARCH=arm64 O=$TEGRA_MODULES_OUT modules_install INSTALL_MOD_PATH=~/tx2_source_build/r32-3-1_Release_v1.0/modules_install/
</code></pre><h3 id="install-built-kernelmodules-to-system">Install built kernel/modules to system</h3>
<p>Copy <code>$TEGRA_KERNEL_OUT/arch/arm64/boot/Image</code> and <code>modules_install/*</code> respectively to <code>tx2_system:/boot/Image</code> and <code>/lib/modules/</code>, and reboot the system will use our newly built kernel/modules etc.</p>
<p>The above way will overwrite original system kernel/modules, however, it would be better to back up original kernel Image to Image.backup, and then edit /boot/extlinux/extlinux.cfg:</p>
<pre tabindex="0"><code>TIMEOUT 30
DEFAULT primary

MENU TITLE L4T boot options

LABEL primary
      MENU LABEL primary kernel
      LINUX /boot/Image.r200_patched
      INITRD /boot/initrd
      APPEND ${cbootargs} quiet
#      APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4

# When testing a custom kernel, it is recommended that you create a backup of
# the original kernel and add a new entry to this file so that the device can
# fallback to the original kernel. To do this:
#
# 1, Make a backup of the original kernel
#      sudo cp /boot/Image /boot/Image.backup
#
# 2, Copy your custom kernel into /boot/Image
#
# 3, Uncomment below menu setting lines for the original kernel
#
# 4, Reboot

LABEL backup
   MENU LABEL backup kernel
   LINUX /boot/Image.backup
   INITRD /boot/initrd
   APPEND ${cbootargs} quiet
</code></pre><h2 id="run-realsense-r200-example-apps">Run RealSense R200 example apps</h2>
<p><em><strong>On the patched Jetson TX2 system</strong></em>:</p>
<ul>
<li>Get the The latest SDK/library that supports the legacy RealSense R200 camera is <a href="https://github.com/IntelRealSense/librealsense/tree/v1.12.4">v1.12.4</a></li>
</ul>
<pre tabindex="0"><code>wget https://github.com/IntelRealSense/librealsense/archive/refs/tags/v1.12.4.tar.gz
tar xvfz ./v1.12.4.tar.gz
</code></pre><ul>
<li>Build examples</li>
</ul>
<pre tabindex="0"><code>cd librealsense-1.12.4
mkdir build &amp;&amp; cd build
cmake .. -DBUILD_EXAMPLES:BOOL=true
make -j4
</code></pre><p>You will find these compiled successfully:</p>
<pre tabindex="0"><code>nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls examples/
CMakeFiles           cpp-callback    cpp-config-ui          cpp-motion-module  cpp-restart 
cpp-tutorial-2-streams     c-tutorial-2-streams cmake_install.cmake  cpp-callback-2 
cpp-enumerate-devices  cpp-multicam       cpp-stride            cpp-tutorial-3-pointcloud 
c-tutorial-3-pointcloud cpp-alignimages      cpp-capture    cpp-headless cpp-pointcloud 
cpp-tutorial-1-depth  c-tutorial-1-depth         Makefile

nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ls -al *.so*
lrwxrwxrwx 1 nvidia nvidia       17 Jun  3 14:46 librealsense.so -&gt; librealsense.so.1
lrwxrwxrwx 1 nvidia nvidia       22 Jun  3 14:46 librealsense.so.1 -&gt; librealsense.so.1.12.4
-rwxrwxr-x 1 nvidia nvidia 11547184 Jun  3 14:46 librealsense.so.1.12.4

nvidia@tx2-r32:~/experiment/librealsense-1.12.4/build$ ./examples/cpp-tutorial-2-streams 
There are 1 connected RealSense devices.

Using device 0, an Intel RealSense R200
    Serial number: xxxxxxxx
    Firmware version: 1.0.72.06
</code></pre><p><img src="r200-example-run-screenshot.png" alt="R200 camera running tutorial" title="r200 running"></p>
<ul>
<li>Run on-board CSI camera</li>
</ul>
<pre tabindex="0"><code>gst-launch-1.0 nvarguscamerasrc ! nvvidconv ! xvimagesink
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>My First Post</title>
      <link>https://jinchenglee.github.io/blog/my-first-post/</link>
      <pubDate>Sat, 01 Jun 2024 18:19:45 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/blog/my-first-post/</guid>
      <description><![CDATA[<p>This is my first blog using Hugo generated contents backed by github.io.</p>
<p>It records how to add new blog article using markdown.</p>
<h2 id="steps-to-add-a-blog-article">Steps to add a blog article</h2>
<ol>
<li>Go to synced down <a href="https://github.com/jinchenglee/blog_markdown">blog_markdown</a>.</li>
<li>Create new markdown file.</li>
</ol>
<pre tabindex="0"><code>cd blog_markdown/vitob-blog
hugo new content blog/xxx.md
</code></pre><ol start="3">
<li>Edit xxx.md</li>
<li>Preview by running &lsquo;$&gt; hugo server -D&rsquo;</li>
</ol>
<h2 id="continue-steps-to-publish">Continue; Steps to publish</h2>
<ol start="5">
<li>If satisfied with preview at http://localhost:1313/, changing &lsquo;draft = true&rsquo; to &lsquo;draft = false&rsquo; in xxx.md. Then run &lsquo;$&gt; hugo&rsquo; to generate contents under public subdirectory.</li>
<li>Copy or move public/* to synced down <a href="git@github.com:jinchenglee/jinchenglee.github.io.git">github.io</a> repository and then push it to github.</li>
</ol>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>My First Post</title>
      <link>https://jinchenglee.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 01 Jun 2024 18:19:45 -0700</pubDate>
      
      <guid>https://jinchenglee.github.io/posts/my-first-post/</guid>
      <description><![CDATA[<p>This is my first blog using Hugo generated contents backed by github.io.</p>
<p>It records how to add new blog article using markdown.</p>
<h2 id="steps-to-add-a-blog-article">Steps to add a blog article</h2>
<ol>
<li>Go to synced down <a href="https://github.com/jinchenglee/blog_markdown">blog_markdown</a>.</li>
<li>Create new markdown file.</li>
</ol>
<pre tabindex="0"><code>cd blog_markdown/vitob-blog
hugo new content posts/&lt;dir name&gt;/index.md
</code></pre><ol start="3">
<li>Edit xxx.md</li>
<li>Preview by running &lsquo;$&gt; hugo server -D&rsquo;</li>
</ol>
<h2 id="continue-steps-to-publish">Continue; Steps to publish</h2>
<ol start="5">
<li>If satisfied with preview at http://localhost:1313/, changing &lsquo;draft = true&rsquo; to &lsquo;draft = false&rsquo; in xxx.md. Then run &lsquo;$&gt; hugo&rsquo; to generate contents under public subdirectory.</li>
<li>Copy or move public/* to synced down <a href="git@github.com:jinchenglee/jinchenglee.github.io.git">github.io</a> repository and then push it to github.</li>
</ol>
]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
